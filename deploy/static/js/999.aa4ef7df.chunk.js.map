{"version":3,"file":"static/js/999.aa4ef7df.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Button/Button.module.scss?197e","components/Button/index.tsx","webpack://psbeauty/./src/components/Layout/Backdrop/Backdrop.module.scss?d14b","components/Layout/Backdrop/index.tsx","webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/components/ButtonGroup/ButtonGroup.module.scss?d66f","components/ButtonGroup/index.tsx","webpack://psbeauty/./src/pages/Clinic/ClinicSwitch/ClinicSwitch.module.scss?2acd","pages/Clinic/ClinicSwitch/index.tsx","pages/Clinic/ClinicInnerWrapper/ClinicInnerWrapper.graphql.generated.ts","pages/Clinic/ClinicInnerWrapper/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Button_wrapper__GqKsN\",\"primary\":\"Button_primary__9MLUH\",\"secondary\":\"Button_secondary__sUGsj\",\"selected\":\"Button_selected__NZP20\",\"text\":\"Button_text__Rk+Tr\",\"transparent\":\"Button_transparent__puDsp\"};","import React, { PropsWithChildren } from \"react\"\nimport cx from \"classnames\"\nimport styled from \"./Button.module.scss\"\n\nconst VARIANT = {\n  PRIMARY: \"primary\",\n  SECONDARY: \"secondary\",\n  TEXT: \"text\",\n  TRANSPARENT: \"transparent\",\n} as const\n\nexport type ButtonProps = {\n  /**\n   * Specify the type of the\n   */\n  variant?: typeof VARIANT[keyof typeof VARIANT]\n  /**\n   * Specify whether the Button is currently selected\n   */\n  selected?: boolean\n  /**\n   * The button's key for the ButtonGroup.\n   */\n  eventKey?: ReactProps.EventKey\n  /**\n   * The button is a submit/text button\n   */\n  type?: \"submit\" | \"button\"\n  /**\n   * Provide an optional function to be called when the button element is clicked\n   */\n  onClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    eventKey?: { eventKey?: ReactProps.EventKey },\n  ) => void\n} & ReactProps.Component\n\nconst Button = ({\n  variant = \"primary\",\n  className,\n  selected = false,\n  children = \"Click\",\n  eventKey,\n  onClick,\n  ...props\n}: PropsWithChildren<ButtonProps>) => {\n  return (\n    <button\n      className={cx(styled.wrapper, styled[variant], { [styled.selected]: selected }, className)}\n      style={props.style}\n      onClick={e => {\n        onClick && onClick(e, { eventKey: eventKey })\n      }}\n      {...props}>\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Backdrop_wrapper__LB3Yk\"};","import styled from \"./Backdrop.module.scss\"\nimport cx from \"classnames\"\n\nexport type BackdropProps = ReactProps.Component\n\nconst Backdrop = ({ style = {}, ...props }: BackdropProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={{ ...style }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Backdrop\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"outer\":\"ButtonGroup_outer__42i6k\",\"button\":\"ButtonGroup_button__U3lRJ\"};","import React, { useEffect, useState } from \"react\"\nimport styled from \"./ButtonGroup.module.scss\"\nimport Button from \"components/Button\"\n\ntype EventKey = string | number\n\nexport type ButtonGroupProps = {\n  /**\n   * Default values for the ButtonGroup.\n   */\n  defaultActiveKey?: EventKey\n  /**\n   * Called when selected value has changed.\n   */\n  onSelect?: (\n    e: React.MouseEvent<Element, MouseEvent>,\n    { eventKey }: { eventKey?: EventKey },\n  ) => void\n} & ReactProps.Component\n\nconst ButtonGroup = (props: ButtonGroupProps) => {\n  const [eventKey, setEventKay] = useState(props.defaultActiveKey)\n\n  const handleClick = (\n    e: React.MouseEvent<Element, MouseEvent>,\n    { eventKey }: { eventKey?: ReactProps.EventKey },\n  ) => {\n    if (!eventKey) return\n\n    setEventKay(eventKey)\n    props.onSelect && props.onSelect(e, { eventKey })\n  }\n  useEffect(() => {\n    setEventKay(props.defaultActiveKey)\n  }, [props.defaultActiveKey])\n\n  return (\n    <div className={styled.outer}>\n      {React.Children.map(props.children, child => {\n        if (!React.isValidElement(child)) return\n        if (child.type === Button) {\n          return React.cloneElement(child, {\n            ...child.props,\n            variant: \"secondary\",\n            selected: child.props.eventKey === eventKey,\n            onClick: handleClick,\n          })\n        }\n        return null\n      })}\n    </div>\n  )\n}\nexport default ButtonGroup\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ClinicSwitch_wrapper__cQK8m\"};","import { useMatch, Navigate } from \"react-router-dom\"\nimport Button from \"components/Button\"\nimport ButtonGroup from \"components/ButtonGroup\"\nimport useGo from \"components/Router/useGo\"\nimport styled from \"./ClinicSwitch.module.scss\"\n\nconst DEFAULT_TAB = \"info\"\n\nconst ClinicSwitch = () => {\n  const go = useGo()\n  const match = useMatch(\"/clinic/:id/inner/:tab\")\n\n  if (!match?.params.tab) return <Navigate to={DEFAULT_TAB} replace />\n  return (\n    <div className={styled.wrapper}>\n      <ButtonGroup\n        defaultActiveKey={match?.params.tab || DEFAULT_TAB}\n        onSelect={(_, { eventKey }) => {\n          go.toClinicInner({ id: match.params.id || \"\", tab: `${eventKey}` })\n        }}>\n        <Button eventKey=\"info\">診所</Button>\n        <Button eventKey=\"introduction\">介紹</Button>\n        <Button eventKey=\"medical-team\">團隊</Button>\n        <Button eventKey=\"activities\">活動</Button>\n      </ButtonGroup>\n    </div>\n  )\n}\n\nexport default ClinicSwitch\n","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetClinicQueryVariables = Types.Exact<{\n  id: Types.Scalars[\"String\"]\n}>\n\nexport type GetClinicQuery = {\n  clinic?: {\n    __typename: \"Clinic\"\n    name?: string | null\n    county?: string | null\n    town?: string | null\n    address?: string | null\n    phone?: string | null\n    web?: string | null\n    consultReplyCount: number\n    caseCount: number\n    description?: string | null\n    categories?: Array<{ __typename: \"Category\"; name?: string | null } | null> | null\n    cases?: Array<{\n      __typename: \"ClinicCase\"\n      id?: string | null\n      description?: string | null\n      title?: string | null\n      image?: string | null\n      collectedCount: number\n      categories?: Array<{\n        __typename: \"Category\"\n        id?: string | null\n        name?: string | null\n      } | null> | null\n    } | null> | null\n    images?: Array<{\n      __typename: \"ClinicImage\"\n      id?: string | null\n      image?: string | null\n      redirectType?: string | null\n      targetId?: string | null\n      sort: number\n    } | null> | null\n    doctors?: Array<{\n      __typename: \"ClinicDoctor\"\n      id?: string | null\n      name?: string | null\n      resumes?: string | null\n      photo?: string | null\n      title?: string | null\n      expertise?: string | null\n    } | null> | null\n    activities?: Array<{\n      __typename: \"ClinicActivity\"\n      id?: string | null\n      subject?: string | null\n      content?: string | null\n      createdAt: number\n      image?: string | null\n    } | null> | null\n  } | null\n}\n\nexport const GetClinicDocument = gql`\n  query GetClinic($id: String!) {\n    clinic(id: $id) {\n      name\n      county\n      town\n      address\n      phone\n      web\n      consultReplyCount\n      caseCount\n      description\n      categories {\n        name\n      }\n      cases {\n        id\n        description\n        title\n        image\n        collectedCount\n        categories {\n          id\n          name\n        }\n      }\n      images {\n        id\n        image\n        redirectType\n        targetId\n        sort\n      }\n      doctors {\n        id\n        name\n        resumes\n        photo\n        title\n        expertise\n      }\n      activities {\n        id\n        subject\n        content\n        createdAt\n        image\n      }\n    }\n  }\n`\n\n/**\n * __useGetClinicQuery__\n *\n * To run a query within a React component, call `useGetClinicQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClinicQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClinicQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetClinicQuery(\n  baseOptions: Apollo.QueryHookOptions<GetClinicQuery, GetClinicQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetClinicQuery, GetClinicQueryVariables>(GetClinicDocument, options)\n}\nexport function useGetClinicLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetClinicQuery, GetClinicQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetClinicQuery, GetClinicQueryVariables>(GetClinicDocument, options)\n}\nexport type GetClinicQueryHookResult = ReturnType<typeof useGetClinicQuery>\nexport type GetClinicLazyQueryHookResult = ReturnType<typeof useGetClinicLazyQuery>\nexport type GetClinicQueryResult = Apollo.QueryResult<GetClinicQuery, GetClinicQueryVariables>\n","import { useEffect } from \"react\"\nimport { Outlet, useOutletContext, useMatch, useParams, useNavigate } from \"react-router-dom\"\nimport { useAuth } from \"hooks/useAuth\"\nimport Header from \"components/Layout/Header\"\nimport Backdrop from \"components/Layout/Backdrop\"\nimport ClinicSwitch from \"../ClinicSwitch\"\nimport Toolbars from \"containers/Toolbars\"\nimport {\n  useGetClinicLazyQuery,\n  GetClinicQueryHookResult,\n} from \"./ClinicInnerWrapper.graphql.generated\"\nimport QueryStatus from \"components/QueryStatus\"\n\ntype ContextType = { query: { data: GetClinicQueryHookResult[\"data\"] } }\n\nconst ClinicInnerWrapper = () => {\n  const auth = useAuth()\n  const navigate = useNavigate()\n  const match = useMatch(\"/clinic/:id/activity/:activityId\")\n  const { id } = useParams()\n\n  const [loadQuery, query] = useGetClinicLazyQuery()\n\n  useEffect(() => {\n    if (match?.params.activityId) return\n    loadQuery({\n      variables: {\n        id: id || \"\",\n      },\n    })\n  }, [match?.params.activityId, loadQuery, id])\n\n  if (query?.loading || !query?.data) return <QueryStatus.Loading />\n  if (query.error) return <QueryStatus.Error />\n\n  return match?.params.activityId ? (\n    <Outlet />\n  ) : (\n    <>\n      <Header\n        leftArrow={!auth?.user?.clinic}\n        title={query?.data?.clinic?.name || \"\"}\n        redirect={() => navigate(\"/clinic\")}\n      />\n      <Backdrop style={{ paddingBottom: \"120px\" }}>\n        <ClinicSwitch />\n        <Outlet context={{ query }} />\n        {auth.user.clinic ? <Toolbars.Clinic /> : <Toolbars />}\n      </Backdrop>\n    </>\n  )\n}\n\nexport function useClinicInnerContext() {\n  return useOutletContext<ContextType>()\n}\n\nexport default ClinicInnerWrapper\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"names":["variant","className","selected","children","eventKey","onClick","props","cx","styled","style","e","navigate","useNavigate","text","useParams","title","leftArrow","redirect","Icon","name","useState","defaultActiveKey","setEventKay","handleClick","onSelect","useEffect","React","child","type","Button","DEFAULT_TAB","go","useGo","match","useMatch","params","tab","_","toClinicInner","id","to","replace","defaultOptions","GetClinicDocument","gql","useClinicInnerContext","useOutletContext","auth","useAuth","baseOptions","options","Apollo","useGetClinicLazyQuery","loadQuery","query","activityId","variables","loading","data","QueryStatus","error","Header","user","clinic","Backdrop","paddingBottom","context","Toolbars","EAGER_METHODS","useLazyQuery","internalState","useInternalState","useApolloClient","client","execOptionsRef","useRef","merged","current","mergeOptions","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","useMemo","key","method","create","forceUpdate","apply","this","arguments","_i","useCallback","executeOptions","fetchPolicy","promise","asyncUpdate","then","queryResult","catch"],"sourceRoot":""}