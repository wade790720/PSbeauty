{"version":3,"file":"static/js/800.90ef34ef.chunk.js","mappings":"iKACA,EAA0B,0B,wCCY1B,EARiB,SAAC,GAA6C,IAAD,IAA1CA,MAAAA,OAA0C,MAAlC,GAAkC,EAA3BC,GAA2B,YAC5D,OACE,gBAAKC,UAAWC,GAAAA,CAAGC,EAAgBH,EAAMC,WAAYF,OAAK,UAAOA,GAAjE,SACGC,EAAMI,a,uFCPb,EAA0B,wBAA1B,EAA0D,sBAA1D,EAAwF,sBAAxF,EAAqH,qBAArH,EAAkJ,sBAAlJ,EAAmL,yB,4DC0CnL,EA/Be,SAAC,GAA2C,IAAD,MAAxCL,MAAAA,OAAwC,MAAhC,GAAgC,EAAzBC,GAAyB,YAClDK,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,MAATD,KAER,OACE,iBACEN,UAAWC,GAAAA,CAAGC,EAAgBH,EAAMC,WAAvB,eACVE,EAAeH,EAAMS,OAAST,EAAMI,WAD1B,SAEVD,GAAgBH,EAAMS,QAAUT,EAAMU,WAF5B,IAIbX,OAAK,UAAOA,GALd,UAMGC,EAAMU,YACL,gBACEC,QAAS,kBAAOX,EAAMY,SAAWZ,EAAMY,WAAoBP,EAAPE,GAAiB,GAAe,IADtF,UAEE,SAACM,EAAA,EAAD,CAAMZ,UAAWE,EAAgBW,KAAK,gBAGzCd,EAAMS,OACL,gBACER,UAAWC,GAAAA,CAAGC,GAAD,UACVA,EAAqBH,EAAMU,YAFhC,SAIGV,EAAMS,QAGTT,EAAMI,c,kECpCd,I,EAAA,GAAgB,QAAU,2BAA2B,QAAU,2BAA2B,OAAS,0BAA0B,OAAS,0BAA0B,KAAO,wBAAwB,MAAQ,yBAAyB,MAAQ,yBAAyB,UAAU,2BAA2B,MAAQ,0B,oECGxSW,EAAiB,GA4BVC,GAA2BC,EAAAA,EAAAA,IAAH,uZ,qDCmBrC,EA1CsB,WAAO,IAAD,QACpBC,GAAKC,EAAAA,EAAAA,KACX,ED6DK,SACLC,GAEA,IAAMC,GAAO,kBAAQN,GAAmBK,GACxC,OAAOE,EAAAA,EACLN,EACAK,GCnE+BE,GAAzBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAEd,OAFA,EAAuBC,OAEL,SAACC,EAAA,QAAD,KAGhB,gCACGF,GACC,SAACE,EAAA,UAAD,KAEA,iCACE,SAACC,EAAA,EAAD,CAAQnB,MAAM,kBACd,SAACoB,EAAA,EAAD,CAAU5B,UAAWE,EAAAA,QAArB,UACE,gBAAKF,UAAWE,EAAAA,OAAeJ,MAAO,CAAE+B,cAAe,QAAvD,SACO,OAAJN,QAAI,IAAJA,GAAA,UAAAA,EAAMO,aAAN,SAAaC,QAAa,OAAJR,QAAI,IAAJA,GAAA,UAAAA,EAAMO,aAAN,mBAAaC,aAAb,eAAoBC,QAAS,EAAnD,OACCT,QADD,IACCA,GADD,UACCA,EAAMO,aADP,aACC,EAAaC,MAAME,KAAI,SAACC,EAAIC,GAAL,iBACrB,iBAEEzB,QAAS,4BACPO,EAAGmB,aAAa,CACdC,UAAU,UAAAH,EAAGI,YAAH,mBAASC,cAAT,eAAiBC,KAAM,GACjCC,QAAQ,UAAAP,EAAGI,YAAH,eAASE,KAAM,MAG3BxC,UAAWC,GAAAA,CAAGC,EAAAA,KAAaA,EAAO,GAAD,OAAI,eAAeiC,EAAM,IAAzB,YARnC,WASE,gBAAKO,KAAK,UAAAR,EAAGI,YAAH,eAASK,QAAS,MAC5B,gBAAK3C,UAAWE,EAAAA,SAChB,gBAAKF,UAAWE,EAAAA,MAAhB,mBAA+BgC,EAAGI,YAAlC,aAA+B,EAASM,cAX1C,UACOV,EAAGI,YADV,aACO,EAASE,QAclB,gBAAKxC,UAAWE,EAAAA,MAAhB,0DAMV,SAAC2C,EAAA,EAAD","sources":["webpack://psbeauty/./src/components/Layout/Backdrop/Backdrop.module.scss?d14b","components/Layout/Backdrop/index.tsx","webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/pages/SearchAll/SearchAll.module.scss?1b4d","pages/SearchAll/SearchAll.graphql.generated.ts","pages/SearchAll/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Backdrop_wrapper__LB3Yk\"};","import styled from \"./Backdrop.module.scss\"\nimport cx from \"classnames\"\n\nexport type BackdropProps = ReactProps.Component\n\nconst Backdrop = ({ style = {}, ...props }: BackdropProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={{ ...style }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Backdrop\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SearchAll_wrapper__Guarl\",\"filters\":\"SearchAll_filters__vOKcJ\",\"active\":\"SearchAll_active__rl7zi\",\"result\":\"SearchAll_result__L-3i+\",\"cell\":\"SearchAll_cell__kHgQB\",\"cover\":\"SearchAll_cover__NyYZl\",\"title\":\"SearchAll_title__VZZCG\",\"a-style\":\"SearchAll_a-style__fFtIi\",\"empty\":\"SearchAll_empty__j8J-A\"};","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetSearchListAllQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetSearchListAllQuery = {\n  cases?: {\n    __typename: \"CasesConnection\"\n    pageInfo: {\n      __typename: \"PageInfo\"\n      hasNextPage: boolean\n      hasPreviousPage: boolean\n      startCursor?: string | null\n      endCursor?: string | null\n    }\n    edges?: Array<{\n      __typename: \"CasesEdge\"\n      cursor: string\n      node?: {\n        __typename: \"ClinicCase\"\n        id?: string | null\n        title?: string | null\n        image?: string | null\n        imageText?: string | null\n        clinic?: { __typename: \"Clinic\"; id?: string | null } | null\n      } | null\n    }> | null\n  } | null\n}\n\nexport const GetSearchListAllDocument = gql`\n  query getSearchListAll {\n    cases(first: 50, order: { id: DESC }) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          title\n          image\n          imageText\n          clinic {\n            id\n          }\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetSearchListAllQuery__\n *\n * To run a query within a React component, call `useGetSearchListAllQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSearchListAllQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSearchListAllQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSearchListAllQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetSearchListAllQuery, GetSearchListAllQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetSearchListAllQuery, GetSearchListAllQueryVariables>(\n    GetSearchListAllDocument,\n    options,\n  )\n}\nexport function useGetSearchListAllLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetSearchListAllQuery, GetSearchListAllQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetSearchListAllQuery, GetSearchListAllQueryVariables>(\n    GetSearchListAllDocument,\n    options,\n  )\n}\nexport type GetSearchListAllQueryHookResult = ReturnType<typeof useGetSearchListAllQuery>\nexport type GetSearchListAllLazyQueryHookResult = ReturnType<typeof useGetSearchListAllLazyQuery>\nexport type GetSearchListAllQueryResult = Apollo.QueryResult<\n  GetSearchListAllQuery,\n  GetSearchListAllQueryVariables\n>\n","import styled from \"./SearchAll.module.scss\"\nimport cx from \"classnames\"\nimport Backdrop from \"components/Layout/Backdrop\"\nimport { useGetSearchListAllQuery } from \"./SearchAll.graphql.generated\"\nimport { useGo } from \"components/Router\"\nimport Header from \"components/Layout/Header\"\nimport Toolbars from \"containers/Toolbars\"\nimport QueryStatus from \"components/QueryStatus\"\n\nconst SearchListAll = () => {\n  const go = useGo()\n  const { data, loading, error } = useGetSearchListAllQuery()\n\n  if (error) return <QueryStatus.Error />\n\n  return (\n    <>\n      {loading ? (\n        <QueryStatus.Loading />\n      ) : (\n        <>\n          <Header title=\"探索\" />\n          <Backdrop className={styled.wrapper}>\n            <div className={styled.result} style={{ paddingBottom: \"80px\" }}>\n              {data?.cases?.edges && data?.cases?.edges?.length > 0 ? (\n                data?.cases?.edges.map((el, idx) => (\n                  <div\n                    key={el.node?.id}\n                    onClick={() =>\n                      go.toClinicCase({\n                        clinicId: el.node?.clinic?.id || \"\",\n                        caseId: el.node?.id || \"\",\n                      })\n                    }\n                    className={cx(styled.cell, styled[`${\"axxxxxxaxxxx\"[idx % 12]}-style`])}>\n                    <img src={el.node?.image || \"\"} />\n                    <div className={styled.cover} />\n                    <div className={styled.title}>{el.node?.imageText}</div>\n                  </div>\n                ))\n              ) : (\n                <div className={styled.empty}>暫無資料顯示</div>\n              )}\n            </div>\n          </Backdrop>\n        </>\n      )}\n      <Toolbars />\n    </>\n  )\n}\nexport default SearchListAll\n"],"names":["style","props","className","cx","styled","children","navigate","useNavigate","text","useParams","title","leftArrow","onClick","redirect","Icon","name","defaultOptions","GetSearchListAllDocument","gql","go","useGo","baseOptions","options","Apollo","useGetSearchListAllQuery","data","loading","error","QueryStatus","Header","Backdrop","paddingBottom","cases","edges","length","map","el","idx","toClinicCase","clinicId","node","clinic","id","caseId","src","image","imageText","Toolbars"],"sourceRoot":""}