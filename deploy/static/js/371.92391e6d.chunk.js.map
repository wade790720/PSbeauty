{"version":3,"file":"static/js/371.92391e6d.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/containers/MessageCard/MessageCard.module.scss?6987","containers/MessageCard/index.tsx","hooks/useElementOnScreen.ts","pages/Doctor/DoctorInbox/DoctorInbox.graphql.generated.ts","webpack://psbeauty/./src/pages/Doctor/DoctorInbox/DoctorInbox.module.scss?1f33","pages/Doctor/DoctorInbox/index.tsx","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MessageCard_wrapper__ySAWV\",\"title\":\"MessageCard_title__aTmZV\",\"message\":\"MessageCard_message__pvkOQ\",\"head\":\"MessageCard_head__q5s9l\",\"tag\":\"MessageCard_tag__rzOuC\",\"unread\":\"MessageCard_unread__09yTm\"};","import useElementOnScreen from \"hooks/useElementOnScreen\"\nimport { useEffect } from \"react\"\nimport styled from \"./MessageCard.module.scss\"\n\nexport type MessageCardProps = {\n  unread?: boolean\n  title: string\n  message: string\n  last?: boolean\n  isOneOnOne?: boolean\n  fetchMore?: () => void\n  onClick?: () => void\n} & ReactProps.Component\n\nconst MessageCard = ({ ...props }: MessageCardProps) => {\n  const { containerRef, isVisible } = useElementOnScreen({})\n\n  useEffect(() => {\n    if (props?.last && isVisible && props.fetchMore) {\n      props?.fetchMore()\n    }\n  }, [props.last, props.fetchMore, isVisible])\n\n  return (\n    <div\n      ref={props.last ? (containerRef as unknown as React.RefObject<HTMLDivElement>) : null}\n      className={styled.wrapper}\n      onClick={props.onClick}>\n      <div className={styled.head}>\n        <div className={styled.tag}>{props.isOneOnOne ? \"1vs1\" : \"шлошйв\"}</div>\n        <div className={styled.title}>{props.title}</div>\n      </div>\n      <div className={styled.message}>{props.message}</div>\n      {props.unread && <div className={styled.unread} />}\n    </div>\n  )\n}\n\nexport default MessageCard\n","import { useState, useRef, useEffect, useCallback } from \"react\"\n\ntype useElementOnScreenProps = {\n  root?: HTMLDivElement | null\n  rootMargin?: string\n  threshold?: number\n}\n\nconst useElementOnScreen = ({\n  root = null,\n  rootMargin = \"0px\",\n  threshold = 1.0,\n}: useElementOnScreenProps) => {\n  const [ready, setReady] = useState(false)\n  const targetRef = useRef<null | HTMLDivElement>(null)\n  const containerRef = useCallback((node: HTMLDivElement) => {\n    targetRef.current = node\n    setReady(!!node)\n  }, [])\n\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    if (!ready) return\n\n    const observer = new IntersectionObserver(\n      entries => {\n        const [entry] = entries\n        setIsVisible(entry.isIntersecting)\n      },\n      { root, rootMargin, threshold },\n    )\n\n    targetRef?.current && observer.observe(targetRef.current)\n\n    return () => {\n      targetRef?.current && observer.unobserve(targetRef.current)\n    }\n  }, [root, rootMargin, threshold, ready])\n\n  return { containerRef, isVisible }\n}\n\nexport default useElementOnScreen\n","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetDoctorInboxQueryVariables = Types.Exact<{\n  input?: Types.InputMaybe<Types.Scalars[\"String\"]>\n}>\n\nexport type GetDoctorInboxQuery = {\n  clinicInbox?: {\n    __typename: \"ClinicInboxConnection\"\n    pageInfo: {\n      __typename: \"PageInfo\"\n      hasNextPage: boolean\n      hasPreviousPage: boolean\n      startCursor?: string | null\n      endCursor?: string | null\n    }\n    edges?: Array<{\n      __typename: \"ClinicInboxEdge\"\n      cursor: string\n      node?: {\n        __typename: \"ClinicInbox\"\n        id?: string | null\n        readAt: number\n        user?: { __typename: \"User\"; id?: string | null; name?: string | null } | null\n        topic?: {\n          __typename: \"ClinicConsultTopic\"\n          id?: string | null\n          consult?: {\n            __typename: \"Consult\"\n            id?: string | null\n            subject?: string | null\n            content?: string | null\n          } | null\n          replies?: Array<{\n            __typename: \"ConsultTopicReply\"\n            id?: string | null\n            createdAt: number\n            contentType?: string | null\n            content?: string | null\n            readAt: number\n          } | null> | null\n        } | null\n      } | null\n    }> | null\n  } | null\n}\n\nexport type ReadClinicInboxMutationVariables = Types.Exact<{\n  input: Types.ReadClinicInboxInput\n}>\n\nexport type ReadClinicInboxMutation = {\n  readClinicInbox?: { __typename: \"ReadClinicInboxPayload\"; id?: string | null } | null\n}\n\nexport const GetDoctorInboxDocument = gql`\n  query GetDoctorInbox($input: String) {\n    clinicInbox(first: 15, after: $input, order: { id: DESC }) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          readAt\n          user {\n            id\n            name\n          }\n          topic {\n            id\n            consult {\n              id\n              subject\n              content\n            }\n            replies {\n              id\n              createdAt\n              contentType\n              content\n              readAt\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetDoctorInboxQuery__\n *\n * To run a query within a React component, call `useGetDoctorInboxQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetDoctorInboxQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetDoctorInboxQuery({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useGetDoctorInboxQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetDoctorInboxQuery, GetDoctorInboxQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetDoctorInboxQuery, GetDoctorInboxQueryVariables>(\n    GetDoctorInboxDocument,\n    options,\n  )\n}\nexport function useGetDoctorInboxLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetDoctorInboxQuery, GetDoctorInboxQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetDoctorInboxQuery, GetDoctorInboxQueryVariables>(\n    GetDoctorInboxDocument,\n    options,\n  )\n}\nexport type GetDoctorInboxQueryHookResult = ReturnType<typeof useGetDoctorInboxQuery>\nexport type GetDoctorInboxLazyQueryHookResult = ReturnType<typeof useGetDoctorInboxLazyQuery>\nexport type GetDoctorInboxQueryResult = Apollo.QueryResult<\n  GetDoctorInboxQuery,\n  GetDoctorInboxQueryVariables\n>\nexport const ReadClinicInboxDocument = gql`\n  mutation readClinicInbox($input: ReadClinicInboxInput!) {\n    readClinicInbox(input: $input) {\n      id\n    }\n  }\n`\nexport type ReadClinicInboxMutationFn = Apollo.MutationFunction<\n  ReadClinicInboxMutation,\n  ReadClinicInboxMutationVariables\n>\n\n/**\n * __useReadClinicInboxMutation__\n *\n * To run a mutation, you first call `useReadClinicInboxMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReadClinicInboxMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [readClinicInboxMutation, { data, loading, error }] = useReadClinicInboxMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useReadClinicInboxMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    ReadClinicInboxMutation,\n    ReadClinicInboxMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<ReadClinicInboxMutation, ReadClinicInboxMutationVariables>(\n    ReadClinicInboxDocument,\n    options,\n  )\n}\nexport type ReadClinicInboxMutationHookResult = ReturnType<typeof useReadClinicInboxMutation>\nexport type ReadClinicInboxMutationResult = Apollo.MutationResult<ReadClinicInboxMutation>\nexport type ReadClinicInboxMutationOptions = Apollo.BaseMutationOptions<\n  ReadClinicInboxMutation,\n  ReadClinicInboxMutationVariables\n>\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"DoctorInbox_wrapper__lz58A\",\"hint\":\"DoctorInbox_hint__4bngY\"};","import Header from \"components/Layout/Header\"\nimport MessageCard from \"containers/MessageCard\"\nimport Toolbars from \"containers/Toolbars\"\nimport { doc, onSnapshot } from \"firebase/firestore\"\nimport { useAuth } from \"hooks/useAuth\"\nimport { useEffect, useMemo, useRef } from \"react\"\nimport { useGetDoctorInboxQuery, useReadClinicInboxMutation } from \"./DoctorInbox.graphql.generated\"\nimport styled from \"./DoctorInbox.module.scss\"\nimport { firestore } from \"../../../firebaseClient\"\nimport { useGo } from \"components/Router\"\nimport QueryStatus from \"components/QueryStatus\"\n\nconst DoctorInbox = () => {\n  const go = useGo()\n  const auth = useAuth()\n  const { data, loading, error, refetch, fetchMore } = useGetDoctorInboxQuery({\n    fetchPolicy: \"no-cache\",\n  })\n  const edges = data?.clinicInbox?.edges || []\n  const hasNextPage = data?.clinicInbox?.pageInfo.hasNextPage ?? false\n  const cursorRef = useRef<string>(\"\")\n\n  const [readInbox] = useReadClinicInboxMutation()\n\n  const inboxRef = useMemo(() => {\n    return doc(firestore, \"inbox\", auth.user.id || \"\")\n  }, [])\n\n  useEffect(() => {\n    return onSnapshot(inboxRef, doc => {\n      if (doc.exists()) {\n        refetch()\n      }\n    })\n  }, [])\n\n  const handleFetchMore = () => {\n    const after = edges?.[edges.length - 1]?.cursor || null\n\n    fetchMore({\n      variables: {\n        input: after,\n      },\n      updateQuery: (prevResult, { fetchMoreResult }) => {\n        if (\n          !after ||\n          after === cursorRef?.current ||\n          !fetchMoreResult?.clinicInbox?.edges ||\n          !prevResult?.clinicInbox?.edges ||\n          prevResult?.clinicInbox?.edges.length > edges.length\n        )\n          return prevResult\n\n        fetchMoreResult.clinicInbox.edges = [\n          ...(prevResult?.clinicInbox?.edges || []),\n          ...(fetchMoreResult?.clinicInbox?.edges || []),\n        ]\n\n        cursorRef.current = after\n        return fetchMoreResult\n      },\n    })\n  }\n\n  const readClinicInbox = (id: string) => {\n    console.log(`read: ${id}`)\n    readInbox({\n      variables: {\n        input: {\n          clinicInboxId: id,\n        },\n      },\n    })\n    refetch()\n  }\n\n  if (error) return <QueryStatus.Error />\n\n  return (\n    <>\n      {loading ? (\n        <QueryStatus.Loading />\n      ) : (\n        <>\n          <Header leftArrow title=\"цФ╢ф╗╢хд╛\" />\n          <div className={styled.wrapper}>\n            {edges.length ? (\n              edges?.map((edge, idx) => {\n                const key = edge.node?.id || \"\"\n                const reply = edge.node?.topic?.replies\n                const topic = edge.node?.topic\n                const unread = edge.node?.readAt === 0\n\n                const repliesCount = reply?.length || 0\n                const last = reply?.[repliesCount - 1]?.content || topic?.consult?.content || \"\"\n                const message = last.includes(\"https://firebasestorage\") ? \"хЬЦчЙЗ\" : last\n\n                if (repliesCount === 0 && topic?.consult?.content === \"OneOnOne\") {\n                  return null\n                }\n                return (\n                  <MessageCard\n                    unread={unread}\n                    key={key}\n                    title={topic?.consult?.subject || \"ф╛ЖшЗкцЬГхУбчЪДф╕Ах░Нф╕Ашлошйв\"}\n                    message={message}\n                    last={edges.length - 1 === idx}\n                    fetchMore={() => {\n                      hasNextPage && handleFetchMore()\n                    }}\n                    onClick={() => {\n                      readClinicInbox(key)\n                      go.toChatroom({ id: topic?.id || \"\" })\n                    }}\n                  />\n                )\n              })\n            ) : (\n              <div className={styled.hint}>х░ЪцЬкцЬЙф╗╗ф╜Хф┐бф╗╢</div>\n            )}\n          </div>\n        </>\n      )}\n      <Toolbars.Clinic />\n    </>\n  )\n}\nexport default DoctorInbox\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      ref.current.options?.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["style","props","navigate","useNavigate","text","useParams","className","cx","styled","title","children","leftArrow","onClick","redirect","Icon","name","useElementOnScreen","containerRef","isVisible","useEffect","last","fetchMore","ref","isOneOnOne","message","unread","root","rootMargin","threshold","useState","ready","setReady","targetRef","useRef","useCallback","node","current","setIsVisible","observer","IntersectionObserver","entries","entry","isIntersecting","observe","unobserve","defaultOptions","GetDoctorInboxDocument","gql","ReadClinicInboxDocument","go","useGo","auth","useAuth","baseOptions","options","Apollo","useGetDoctorInboxQuery","fetchPolicy","data","loading","error","refetch","edges","clinicInbox","hasNextPage","pageInfo","cursorRef","useReadClinicInboxMutation","readInbox","inboxRef","useMemo","doc","firestore","user","id","onSnapshot","exists","handleFetchMore","after","length","cursor","variables","input","updateQuery","prevResult","fetchMoreResult","QueryStatus","Header","map","edge","idx","key","reply","topic","replies","readAt","repliesCount","content","consult","includes","MessageCard","subject","console","log","clinicInboxId","toChatroom","Toolbars","useMutation","mutation","client","useApolloClient","verifyDocumentType","DocumentType","called","result","setResult","mutationId","isMounted","Object","assign","execute","executeOptions","ignoreResults","clientOptions","mergeOptions","mutate","then","response","errors","ApolloError","graphQLErrors","result_1","equal","_a","onCompleted","_b","_c","catch","result_2","onError","_d","reset","__assign"],"sourceRoot":""}