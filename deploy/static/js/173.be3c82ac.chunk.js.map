{"version":3,"file":"static/js/173.be3c82ac.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Button/Button.module.scss?197e","components/Button/index.tsx","components/Modal/ModalPopup/index.tsx","webpack://psbeauty/./src/components/Modal/ModalDialog/ModalDialog.module.scss?9216","components/Modal/ModalDialog/index.tsx","webpack://psbeauty/./src/components/Modal/ModalHeader/ModalHeader.module.scss?68a2","components/Modal/ModalHeader/index.tsx","webpack://psbeauty/./src/components/Modal/ModalBody/ModalBody.module.scss?5b3c","components/Modal/ModalBody/index.tsx","webpack://psbeauty/./src/components/Modal/ModalFooter/ModalFooter.module.scss?a978","components/Modal/ModalFooter/index.tsx","components/Modal/Modal/index.tsx","components/Modal/withOpen.tsx","components/Modal/index.tsx","webpack://psbeauty/./src/pages/SignIn/SignIn.module.scss?793f","pages/SignIn/SignIn.graphql.generated.ts","pages/SignIn/index.tsx","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","../node_modules/@apollo/src/react/hooks/useMutation.ts","../node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Button_wrapper__GqKsN\",\"primary\":\"Button_primary__9MLUH\",\"secondary\":\"Button_secondary__sUGsj\",\"selected\":\"Button_selected__NZP20\",\"text\":\"Button_text__Rk+Tr\",\"transparent\":\"Button_transparent__puDsp\"};","import React, { PropsWithChildren } from \"react\"\nimport cx from \"classnames\"\nimport styled from \"./Button.module.scss\"\n\nconst VARIANT = {\n  PRIMARY: \"primary\",\n  SECONDARY: \"secondary\",\n  TEXT: \"text\",\n  TRANSPARENT: \"transparent\",\n} as const\n\nexport type ButtonProps = {\n  /**\n   * Specify the type of the\n   */\n  variant?: typeof VARIANT[keyof typeof VARIANT]\n  /**\n   * Specify whether the Button is currently selected\n   */\n  selected?: boolean\n  /**\n   * The button's key for the ButtonGroup.\n   */\n  eventKey?: ReactProps.EventKey\n  /**\n   * The button is a submit/text button\n   */\n  type?: \"submit\" | \"button\"\n  /**\n   * Provide an optional function to be called when the button element is clicked\n   */\n  onClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    eventKey?: { eventKey?: ReactProps.EventKey },\n  ) => void\n} & ReactProps.Component\n\nconst Button = ({\n  variant = \"primary\",\n  className,\n  selected = false,\n  children = \"Click\",\n  eventKey,\n  onClick,\n  ...props\n}: PropsWithChildren<ButtonProps>) => {\n  return (\n    <button\n      className={cx(styled.wrapper, styled[variant], { [styled.selected]: selected }, className)}\n      style={props.style}\n      onClick={e => {\n        onClick && onClick(e, { eventKey: eventKey })\n      }}\n      {...props}>\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","import Popup from \"reactjs-popup\"\nimport { PopupProps } from \"reactjs-popup/dist/types\"\n\nexport type ModalPopupProps = {\n  /**\n   * Should the modal appear on screen or not\n   */\n  open?: boolean\n  backdrop?: boolean\n} & Partial<Pick<PopupProps, \"open\" | \"closeOnDocumentClick\" | \"onClose\" | \"children\">>\n\nconst ModalPopup = ({ open = false, backdrop = true, ...props }: ModalPopupProps) => {\n  return (\n    <Popup\n      modal\n      nested\n      lockScroll\n      open={open}\n      closeOnDocumentClick={backdrop}\n      closeOnEscape\n      onClose={props.onClose}\n      contentStyle={{\n        background: \"transparent\",\n        border: \"none\",\n        width: \"auto\",\n      }}\n      overlayStyle={{\n        backgroundColor: \"#091e428a\",\n      }}>\n      {props.children}\n    </Popup>\n  )\n}\n\nexport default ModalPopup\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalDialog_wrapper__SJQv5\"};","import cx from \"classnames\"\nimport styled from \"./ModalDialog.module.scss\"\n\nexport type ModalDialogProps = ReactProps.Component\n\nconst ModalDialog = (props: ModalDialogProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={props.style}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default ModalDialog\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalHeader_wrapper__tVVhd\"};","import cx from \"classnames\"\nimport styled from \"./ModalHeader.module.scss\"\n\nexport type ModalHeaderProps = {\n  /**\n   * The Modal header.\n   */\n  title?: string\n} & ReactProps.Component\n\nconst ModalHeader = (props: ModalHeaderProps) => {\n  return (\n    <header className={cx(styled.wrapper, props.className)} style={props.style}>\n      <h1>{props.title}</h1>\n      {props.children}\n    </header>\n  )\n}\n\nexport default ModalHeader\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ModalBody_main__yFQS5\"};","import cx from \"classnames\"\nimport styled from \"./ModalBody.module.scss\"\n\nexport type ModalBodyProps = {\n  /**\n   * The Modal content. (props.children > props.content)\n   */\n  content?: string\n} & ReactProps.Component\n\nconst ModalBody = (props: ModalBodyProps) => {\n  return (\n    <main className={cx(styled.main, props.className)} style={props.style}>\n      {props.children || props.content}\n    </main>\n  )\n}\n\nexport default ModalBody\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalFooter_wrapper__eBzg3\",\"disabled\":\"ModalFooter_disabled__U85L9\"};","import cx from \"classnames\"\nimport styled from \"./ModalFooter.module.scss\"\n\nexport type ModalFooterProps = {\n  /**\n   * The text for confirm button.\n   */\n  confirmText?: string\n  /**\n   * The props for confirm button.\n   */\n  confirmButtonProps?: JSX.IntrinsicElements[\"button\"]\n  /**\n   * A callback triggered whenever the modal is confirmed.\n   */\n  onConfirm?: () => void\n  /**\n   * The text for cancel button, if text is null button will be hidden\n   */\n  cancelText?: string | null\n  /**\n   * The props for cancel button.\n   */\n  cancelButtonProps?: JSX.IntrinsicElements[\"button\"]\n  /**\n   * A callback triggered whenever the cancel button clicked.\n   */\n  onCancel?: () => void\n  /**\n   * A callback triggered whenever the modal is closed.\n   */\n  onClose?: () => void\n} & ReactProps.Component\n\nconst ModalFooter = (props: ModalFooterProps) => {\n  const handleConfirm = () => {\n    props.onConfirm && props.onConfirm()\n    props.onClose && props.onClose()\n  }\n\n  const handleCancel = () => {\n    props.onCancel && props.onCancel()\n    props.onClose && props.onClose()\n  }\n\n  return (\n    <footer className={cx(styled.wrapper, props.className)} style={props.style}>\n      {!!props.cancelText && (\n        <div\n          onClick={handleCancel}\n          className={cx({ [styled.disabled]: props.cancelButtonProps?.disabled })}>\n          {props.cancelText}\n        </div>\n      )}\n      {!!props.confirmText && (\n        <div\n          onClick={handleConfirm}\n          className={cx({ [styled.disabled]: props.confirmButtonProps?.disabled })}>\n          {props.confirmText}\n        </div>\n      )}\n    </footer>\n  )\n}\n\nexport default ModalFooter\n","import ModalPopup from \"../ModalPopup\"\nimport ModalDialog from \"../ModalDialog\"\nimport Header from \"../ModalHeader\"\nimport Body from \"../ModalBody\"\nimport Footer from \"../ModalFooter\"\nimport { ModalPopupProps } from \"../ModalPopup\"\nimport { ModalBodyProps } from \"../ModalBody\"\nimport { ModalHeaderProps } from \"../ModalHeader\"\nimport { ModalFooterProps } from \"../ModalFooter\"\nimport { PopupProps } from \"reactjs-popup/dist/types\"\n\nexport type ModalProps = ModalPopupProps &\n  ModalBodyProps &\n  ModalHeaderProps &\n  ModalFooterProps &\n  Partial<Pick<PopupProps, \"open\" | \"closeOnDocumentClick\" | \"onClose\" | \"children\">>\n\nconst Modal = (props: ModalProps) => {\n  return (\n    <ModalPopup open={props.open} closeOnDocumentClick={props.backdrop} onClose={props.onClose}>\n      <ModalDialog>\n        <Header title={props.title} />\n        <Body content={props.content}>{props.children}</Body>\n        <Footer\n          confirmText={props.confirmText}\n          confirmButtonProps={props.confirmButtonProps}\n          cancelText={props.cancelText}\n          cancelButtonProps={props.cancelButtonProps}\n          onConfirm={props.onConfirm}\n          onCancel={props.onCancel}\n          onClose={props.onClose}\n        />\n      </ModalDialog>\n    </ModalPopup>\n  )\n}\n\nexport default Modal\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ModalProps } from \"./Modal\"\n\nexport const getPopupRoot = () => {\n  let popupRoot = document.getElementById(\"popup-root\")\n  if (!popupRoot) {\n    popupRoot = document.createElement(\"div\")\n    popupRoot.setAttribute(\"id\", \"popup-root\")\n    document.body.appendChild(popupRoot)\n  }\n  return popupRoot\n}\n\nexport function open(Modal: React.FC<ModalProps>, config: ModalProps) {\n  const modalRoot = getPopupRoot()\n  const modalDiv = document.createElement(\"div\")\n  modalRoot.appendChild(modalDiv)\n\n  function bindClose(config: ModalProps) {\n    const { onConfirm, onCancel, onClose, ...theOtherConfig } = config\n    const bind = (fn?: () => void) =>\n      fn\n        ? () => {\n            typeof fn === \"function\" && fn()\n            close()\n          }\n        : close\n\n    return {\n      ...theOtherConfig,\n      onConfirm: bind(onConfirm),\n      onCancel: bind(onCancel),\n      onClose: bind(onClose),\n    }\n  }\n\n  function render(config: ModalProps) {\n    ReactDOM.render(<Modal {...bindClose(config)} />, modalDiv)\n  }\n\n  function update(newConfig: ModalProps) {\n    render({\n      ...config,\n      ...newConfig,\n      open: true,\n    })\n  }\n\n  function close() {\n    render({\n      ...config,\n      open: false,\n    })\n  }\n\n  render({\n    ...config,\n    open: true,\n  })\n\n  return {\n    destroy: close,\n    update,\n  }\n}\n\nexport function withAlert(config: ModalProps) {\n  return {\n    ...config,\n    cancelText: null,\n  }\n}\n\nexport function withConfirm(config: ModalProps) {\n  return {\n    ...config,\n    cancelText: config.cancelText,\n  }\n}\n","import ModalBase, { ModalProps } from \"./Modal\"\nimport CustomModal from \"./CustomModal\"\nimport ModalDialog from \"./ModalDialog\"\nimport ModalHeader from \"./ModalHeader\"\nimport ModalBody from \"./ModalBody\"\nimport ModalFooter from \"./ModalFooter\"\nimport { open, withAlert, withConfirm } from \"./withOpen\"\n\nexport type { ModalProps } from \"./Modal\"\nexport type { CustomModalProps } from \"./CustomModal\"\nexport type { ModalHeaderProps } from \"./ModalHeader\"\nexport type { ModalFooterProps } from \"./ModalFooter\"\n\nconst Modal = Object.assign(ModalBase, {\n  alert: (config: ModalProps) => open(ModalBase, withAlert(config)),\n  confirm: (config: ModalProps) => open(ModalBase, withConfirm(config)),\n  Dialog: ModalDialog,\n  Header: ModalHeader,\n  Body: ModalBody,\n  Footer: ModalFooter,\n})\n\nexport { CustomModal }\nexport default Modal\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SignIn_wrapper__Eviuu\",\"title\":\"SignIn_title__vRTMs\",\"subtitle\":\"SignIn_subtitle__I6DVU\",\"actions\":\"SignIn_actions__Z7+O8\",\"version\":\"SignIn_version__b+K0f\"};","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type SignInWithEmailAndPasswordMutationVariables = Types.Exact<{\n  email?: Types.InputMaybe<Types.Scalars[\"String\"]>\n  password?: Types.InputMaybe<Types.Scalars[\"String\"]>\n}>\n\nexport type SignInWithEmailAndPasswordMutation = {\n  signInWithEmailAndPassword?: {\n    __typename: \"SignInWithEmailAndPasswordPayload\"\n    customToken?: string | null\n    firebaseToken?: string | null\n  } | null\n}\n\nexport const SignInWithEmailAndPasswordDocument = gql`\n  mutation SignInWithEmailAndPassword($email: String, $password: String) {\n    signInWithEmailAndPassword(input: { email: $email, password: $password }) {\n      customToken\n      firebaseToken\n    }\n  }\n`\nexport type SignInWithEmailAndPasswordMutationFn = Apollo.MutationFunction<\n  SignInWithEmailAndPasswordMutation,\n  SignInWithEmailAndPasswordMutationVariables\n>\n\n/**\n * __useSignInWithEmailAndPasswordMutation__\n *\n * To run a mutation, you first call `useSignInWithEmailAndPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignInWithEmailAndPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signInWithEmailAndPasswordMutation, { data, loading, error }] = useSignInWithEmailAndPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSignInWithEmailAndPasswordMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SignInWithEmailAndPasswordMutation,\n    SignInWithEmailAndPasswordMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    SignInWithEmailAndPasswordMutation,\n    SignInWithEmailAndPasswordMutationVariables\n  >(SignInWithEmailAndPasswordDocument, options)\n}\nexport type SignInWithEmailAndPasswordMutationHookResult = ReturnType<\n  typeof useSignInWithEmailAndPasswordMutation\n>\nexport type SignInWithEmailAndPasswordMutationResult =\n  Apollo.MutationResult<SignInWithEmailAndPasswordMutation>\nexport type SignInWithEmailAndPasswordMutationOptions = Apollo.BaseMutationOptions<\n  SignInWithEmailAndPasswordMutation,\n  SignInWithEmailAndPasswordMutationVariables\n>\n","import styled from \"./SignIn.module.scss\"\nimport Form from \"components/Form\"\nimport Button from \"components/Button\"\nimport Modal from \"components/Modal\"\nimport { useState } from \"react\"\nimport { useGo } from \"components/Router\"\nimport { SubmitHandler, useForm } from \"react-hook-form\"\nimport { setStorageValue } from \"hooks/useLocalStorage\"\nimport { useAuth } from \"hooks/useAuth\"\nimport jwt_decode from \"jwt-decode\"\nimport { AuthContextProps } from \"hooks/useAuth/AuthContext\"\nimport { useSignInWithEmailAndPasswordMutation } from \"./SignIn.graphql.generated\"\nimport GitInfo from \"react-git-info/macro\"\n\ntype Inputs = {\n  account: string\n  password: string\n}\n\nconst gitInfo = GitInfo()\nconst SignIn = () => {\n  const go = useGo()\n  const auth = useAuth()\n  const [open, setOpen] = useState(false)\n  const [show, setShow] = useState(false)\n  const { register, handleSubmit } = useForm<Inputs>({\n    mode: \"all\",\n  })\n\n  const [signInMutation] = useSignInWithEmailAndPasswordMutation()\n\n  const onSubmit: SubmitHandler<Inputs> = async info => {\n    try {\n      const res = await signInMutation({\n        variables: {\n          email: info.account,\n          password: info.password,\n        },\n      })\n      const email = info.account\n      const customToken = res?.data?.signInWithEmailAndPassword?.customToken || \"\"\n      const firebaseToken = res?.data?.signInWithEmailAndPassword?.firebaseToken || \"\"\n      setStorageValue(\"customToken\", customToken)\n      setStorageValue(\"firebaseToken\", firebaseToken)\n      setStorageValue(\"email\", email)\n      if (customToken && email) {\n        auth.signIn(customToken, info.account)\n        const parserCustomToken: { claims: AuthContextProps[\"user\"] } = jwt_decode(customToken)\n        parserCustomToken?.claims?.clinic\n          ? go.toClinicInner({ id: parserCustomToken?.claims?.clinic, tab: \"\" })\n          : go.toHome()\n      }\n    } catch {\n      setOpen(true)\n    }\n  }\n\n  return (\n    <div className={styled.wrapper}>\n      <div className={styled.title}>登入你的帳戶</div>\n      <div className={styled.subtitle}>歡迎回來！請輸入你的資料</div>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Form.Input type=\"text\" variant=\"gray\" placeholder=\"帳號\" {...register(\"account\")} />\n        <Form.Input type=\"password\" variant=\"gray\" placeholder=\"密碼\" {...register(\"password\")} />\n        <Button variant=\"primary\" type=\"submit\">\n          登入\n        </Button>\n        <Button variant=\"text\" type=\"button\" onClick={go.toHome}>\n          訪客登入\n        </Button>\n        <Modal title=\"登入失敗\" open={open} confirmText=\"確定\" onClose={() => setOpen(false)}>\n          帳號密碼錯誤，請重新輸入\n        </Modal>\n      </Form>\n      <div className={styled.actions}>\n        <div />\n        <div onClick={go.toForgotPassword}>忘記密碼</div>\n        <div>|</div>\n        <div onClick={go.toRegister}>註冊帳號</div>\n      </div>\n      <div className={styled.version}>\n        <button onClick={() => setShow(!show)}>show</button>\n        {show && <span>version：{gitInfo.commit.hash.substring(0, 7)}</span>}\n      </div>\n    </div>\n  )\n}\nexport default SignIn\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      ref.current.options?.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"names":["variant","className","selected","children","eventKey","onClick","props","cx","styled","style","e","open","backdrop","modal","nested","lockScroll","closeOnDocumentClick","closeOnEscape","onClose","contentStyle","background","border","width","overlayStyle","backgroundColor","title","content","cancelText","onCancel","cancelButtonProps","disabled","confirmText","onConfirm","confirmButtonProps","Modal","config","modalRoot","popupRoot","document","getElementById","createElement","setAttribute","body","appendChild","getPopupRoot","modalDiv","render","ReactDOM","theOtherConfig","bind","fn","close","bindClose","destroy","update","newConfig","Object","assign","ModalBase","alert","withAlert","confirm","withConfirm","Dialog","ModalDialog","Header","ModalHeader","Body","ModalBody","Footer","ModalFooter","defaultOptions","SignInWithEmailAndPasswordDocument","gql","gitInfo","go","useGo","auth","useAuth","useState","setOpen","show","setShow","useForm","mode","register","handleSubmit","baseOptions","options","Apollo","useSignInWithEmailAndPasswordMutation","signInMutation","onSubmit","info","variables","email","account","password","res","customToken","data","signInWithEmailAndPassword","firebaseToken","setStorageValue","signIn","parserCustomToken","jwt_decode","claims","clinic","toClinicInner","id","tab","toHome","Form","type","placeholder","Button","toForgotPassword","toRegister","commit","hash","substring","useApolloClient","override","context","useContext","getApolloContext","client","__DEV__","invariant","useMutation","mutation","verifyDocumentType","DocumentType","called","loading","result","setResult","ref","useRef","mutationId","isMounted","current","execute","useCallback","executeOptions","ignoreResults","error","clientOptions","mergeOptions","mutate","then","response","errors","length","ApolloError","graphQLErrors","result_1","equal","_a","onCompleted","_b","_c","catch","result_2","onError","_d","reset","useEffect","__assign","cache","Map","operationName","name","Query","Mutation","Subscription","operation","cached","get","concat","fragments","queries","mutations","subscriptions","definitions","_i","x","kind","push","definition","variableDefinitions","payload","requiredOperationName"],"sourceRoot":""}