{"version":3,"file":"static/js/777.e42bbf88.chunk.js","mappings":"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","sources":["../node_modules/classnames/index.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate() {\n    return new Promise<QueryResult<TData, TVariables>>(resolve => {\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(this.watchQueryOptions);\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: true,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","_objectWithoutProperties","source","excluded","target","sourceKeys","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","useApolloClient","override","context","useContext","getApolloContext","client","__DEV__","invariant","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","value","inst","forceUpdate","canUseLayoutEffect","assign","checkIfSnapshotChanged","_a","useQuery","query","options","create","useInternalState","stateRef","useRef","current","InternalState","state","useState","setTick","tick","previous","asyncResolveFns","Set","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","loading","data","error","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","Map","verifyDocumentType","DocumentType","previousResult","result","previousData","this","Promise","resolve","_this","add","watchQueryOptions","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","delete","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","variables","getDefaultFetchPolicy","_c","_d","initialFetchPolicy","_b","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","get","resultWithoutPartial","set","called","isNonEmptyArray","errors","ApolloError","graphQLErrors","partial","partialRefetch","cache","operationName","type","name","Query","Mutation","Subscription","document","operation","cached","concat","fragments","queries","mutations","subscriptions","definitions","_i","x","kind","definition","variableDefinitions","payload","requiredOperationName"],"sourceRoot":""}