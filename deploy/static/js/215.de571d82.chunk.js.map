{"version":3,"file":"static/js/215.de571d82.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/containers/MessageCard/MessageCard.module.scss?6987","containers/MessageCard/index.tsx","hooks/useElementOnScreen.ts","pages/Member/MemberInbox/MemberInbox.graphql.generated.ts","webpack://psbeauty/./src/pages/Member/MemberInbox/MemberInbox.module.scss?2662","pages/Member/MemberInbox/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MessageCard_wrapper__ySAWV\",\"title\":\"MessageCard_title__aTmZV\",\"message\":\"MessageCard_message__pvkOQ\",\"head\":\"MessageCard_head__q5s9l\",\"tag\":\"MessageCard_tag__rzOuC\",\"unread\":\"MessageCard_unread__09yTm\"};","import useElementOnScreen from \"hooks/useElementOnScreen\"\nimport { useEffect } from \"react\"\nimport styled from \"./MessageCard.module.scss\"\n\nexport type MessageCardProps = {\n  unread?: boolean\n  title: string\n  message: string\n  last?: boolean\n  isOneOnOne?: boolean\n  fetchMore?: () => void\n  onClick?: () => void\n} & ReactProps.Component\n\nconst MessageCard = ({ ...props }: MessageCardProps) => {\n  const { containerRef, isVisible } = useElementOnScreen({})\n\n  useEffect(() => {\n    if (props?.last && isVisible && props.fetchMore) {\n      props?.fetchMore()\n    }\n  }, [props.last, props.fetchMore, isVisible])\n\n  return (\n    <div\n      ref={props.last ? (containerRef as unknown as React.RefObject<HTMLDivElement>) : null}\n      className={styled.wrapper}\n      onClick={props.onClick}>\n      <div className={styled.head}>\n        <div className={styled.tag}>{props.isOneOnOne ? \"1vs1\" : \"諮詢\"}</div>\n        <div className={styled.title}>{props.title}</div>\n      </div>\n      <div className={styled.message}>{props.message}</div>\n      {props.unread && <div className={styled.unread} />}\n    </div>\n  )\n}\n\nexport default MessageCard\n","import { useState, useRef, useEffect, useCallback } from \"react\"\n\ntype useElementOnScreenProps = {\n  root?: HTMLDivElement | null\n  rootMargin?: string\n  threshold?: number\n}\n\nconst useElementOnScreen = ({\n  root = null,\n  rootMargin = \"0px\",\n  threshold = 1.0,\n}: useElementOnScreenProps) => {\n  const [ready, setReady] = useState(false)\n  const targetRef = useRef<null | HTMLDivElement>(null)\n  const containerRef = useCallback((node: HTMLDivElement) => {\n    targetRef.current = node\n    setReady(!!node)\n  }, [])\n\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    if (!ready) return\n\n    const observer = new IntersectionObserver(\n      entries => {\n        const [entry] = entries\n        setIsVisible(entry.isIntersecting)\n      },\n      { root, rootMargin, threshold },\n    )\n\n    targetRef?.current && observer.observe(targetRef.current)\n\n    return () => {\n      targetRef?.current && observer.unobserve(targetRef.current)\n    }\n  }, [root, rootMargin, threshold, ready])\n\n  return { containerRef, isVisible }\n}\n\nexport default useElementOnScreen\n","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type UserInboxesFragment = {\n  __typename: \"ConsultExt\"\n  userInboxes?: Array<{\n    __typename: \"UserInbox\"\n    id?: string | null\n    read: boolean\n    readAt: number\n    topicId?: string | null\n    replies?: Array<{ __typename: \"ConsultTopicReply\"; content?: string | null } | null> | null\n    clinic?: { __typename: \"Clinic\"; id?: string | null; name?: string | null } | null\n  } | null> | null\n}\n\nexport type GetMemberInboxQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetMemberInboxQuery = {\n  me?: {\n    __typename: \"User\"\n    consults?: Array<{\n      __typename: \"ConsultExt\"\n      id?: string | null\n      subject?: string | null\n      content?: string | null\n      days: number\n      images?: Array<string | null> | null\n      oneOnOne: boolean\n      userInboxes?: Array<{\n        __typename: \"UserInbox\"\n        id?: string | null\n        read: boolean\n        readAt: number\n        topicId?: string | null\n        replies?: Array<{ __typename: \"ConsultTopicReply\"; content?: string | null } | null> | null\n        clinic?: { __typename: \"Clinic\"; id?: string | null; name?: string | null } | null\n      } | null> | null\n    } | null> | null\n  } | null\n}\n\nexport const UserInboxesFragmentDoc = gql`\n  fragment UserInboxes on ConsultExt {\n    userInboxes {\n      id\n      read\n      readAt\n      topicId\n      replies {\n        content\n      }\n      clinic {\n        id\n        name\n      }\n    }\n  }\n`\nexport const GetMemberInboxDocument = gql`\n  query GetMemberInbox {\n    me {\n      consults {\n        id\n        subject\n        content\n        days\n        images\n        oneOnOne\n        ...UserInboxes\n      }\n    }\n  }\n  ${UserInboxesFragmentDoc}\n`\n\n/**\n * __useGetMemberInboxQuery__\n *\n * To run a query within a React component, call `useGetMemberInboxQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMemberInboxQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMemberInboxQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMemberInboxQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetMemberInboxQuery, GetMemberInboxQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetMemberInboxQuery, GetMemberInboxQueryVariables>(\n    GetMemberInboxDocument,\n    options,\n  )\n}\nexport function useGetMemberInboxLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetMemberInboxQuery, GetMemberInboxQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetMemberInboxQuery, GetMemberInboxQueryVariables>(\n    GetMemberInboxDocument,\n    options,\n  )\n}\nexport type GetMemberInboxQueryHookResult = ReturnType<typeof useGetMemberInboxQuery>\nexport type GetMemberInboxLazyQueryHookResult = ReturnType<typeof useGetMemberInboxLazyQuery>\nexport type GetMemberInboxQueryResult = Apollo.QueryResult<\n  GetMemberInboxQuery,\n  GetMemberInboxQueryVariables\n>\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MemberInbox_wrapper__iXF9d\",\"empty\":\"MemberInbox_empty__gmagA\",\"text\":\"MemberInbox_text__lbNBr\",\"hide\":\"MemberInbox_hide__WN0ib\"};","import { useState, useRef } from \"react\"\nimport cx from \"classnames\"\nimport styled from \"./MemberInbox.module.scss\"\nimport Header from \"components/Layout/Header\"\nimport MessageCard from \"containers/MessageCard\"\nimport { useGetMemberInboxQuery, UserInboxesFragment } from \"./MemberInbox.graphql.generated\"\nimport QueryStatus from \"components/QueryStatus\"\nimport { firestore } from \"../../../firebaseClient\"\nimport { useEffect, useMemo } from \"react\"\nimport { doc, onSnapshot } from \"firebase/firestore\"\nimport { useAuth } from \"hooks/useAuth\"\nimport { useGo } from \"components/Router\"\nimport { useNavigate } from \"react-router-dom\"\n\nconst MemberInbox = () => {\n  const go = useGo()\n  const auth = useAuth()\n  const navigate = useNavigate()\n  const [next, setNext] = useState(false)\n  const { data, loading, error, refetch } = useGetMemberInboxQuery({\n    fetchPolicy: \"no-cache\",\n  })\n  const userInbox = useRef<UserInboxesFragment[\"userInboxes\"] | null>(null)\n\n  const inboxRef = useMemo(() => {\n    return doc(firestore, \"inbox\", auth.user.id || \"\")\n  }, [])\n\n  useEffect(() => {\n    return onSnapshot(inboxRef, doc => {\n      console.log(doc)\n      if (doc.exists()) {\n        refetch()\n      }\n    })\n  }, [])\n\n  if (loading) return <QueryStatus.Loading />\n  if (error) return <QueryStatus.Error />\n\n  return (\n    <>\n      <Header\n        title=\"收件夾\"\n        leftArrow\n        redirect={() => {\n          if (next) {\n            setNext(false)\n          } else {\n            navigate(-1)\n          }\n        }}\n      />\n      {/* inbox第一層 - 諮詢 + 1對1 */}\n      <div\n        className={cx(styled.wrapper, {\n          [styled.empty]: (data?.me?.consults?.length || 0) <= 0,\n          [styled.hide]: next,\n        })}>\n        {(data?.me?.consults?.length || 0) <= 0 && <div className={styled.text}>尚無信件</div>}\n\n        {data?.me?.consults?.map(consult => {\n          const tmp = consult?.userInboxes?.[0]\n          const last = (tmp?.replies && tmp?.replies[tmp?.replies.length - 1]?.content) || \"\"\n          const message = last.includes(\"https://firebasestorage\") ? \"圖片\" : last\n\n          return (\n            <MessageCard\n              key={consult?.id}\n              title={(consult?.oneOnOne ? tmp?.clinic?.name || \"\" : consult?.subject) || \"\"}\n              message={consult?.oneOnOne ? message : consult?.content || \"\"}\n              isOneOnOne={consult?.oneOnOne}\n              unread={\n                consult?.oneOnOne\n                  ? (tmp?.readAt || 0) <= 0\n                  : consult?.userInboxes?.some(el => !el?.read)\n              }\n              onClick={() => {\n                if (consult?.oneOnOne) {\n                  go.toChatroom({ id: tmp?.topicId || \"\" })\n                } else {\n                  setNext(true)\n                  userInbox.current = consult?.userInboxes || []\n                }\n              }}\n            />\n          )\n        })}\n      </div>\n      {/* 諮詢第二層 - 這個諮詢有哪些診所回覆 */}\n      <div\n        className={cx(styled.wrapper, {\n          [styled.empty]: (userInbox.current?.length || 0) <= 0,\n          [styled.hide]: !next,\n        })}>\n        {(userInbox.current?.length || 0) <= 0 && <div className={styled.text}>尚無診所回應</div>}\n\n        {userInbox.current?.map(reply => {\n          const message =\n            (reply?.replies && reply?.replies[reply?.replies.length - 1]?.content) || \"\"\n          return (\n            <MessageCard\n              key={reply?.id}\n              unread={(reply?.readAt || 0) <= 0}\n              title={\"來自\" + (reply?.clinic?.name || \"\")}\n              message={message.includes(\"https://firebasestorage\") ? \"圖片\" : message}\n              onClick={() => {\n                go.toChatroom({ id: reply?.topicId || \"\" })\n              }}\n            />\n          )\n        })}\n      </div>\n    </>\n  )\n}\nexport default MemberInbox\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"names":["style","props","navigate","useNavigate","text","useParams","className","cx","styled","title","children","leftArrow","onClick","redirect","Icon","name","useElementOnScreen","containerRef","isVisible","useEffect","last","fetchMore","ref","isOneOnOne","message","unread","root","rootMargin","threshold","useState","ready","setReady","targetRef","useRef","useCallback","node","current","setIsVisible","observer","IntersectionObserver","entries","entry","isIntersecting","observe","unobserve","defaultOptions","UserInboxesFragmentDoc","gql","GetMemberInboxDocument","useGetMemberInboxQuery","baseOptions","options","Apollo","useGetMemberInboxLazyQuery","go","useGo","auth","useAuth","next","setNext","fetchPolicy","data","loading","error","refetch","userInbox","inboxRef","useMemo","doc","firestore","user","id","onSnapshot","console","log","exists","QueryStatus","Header","me","consults","length","map","consult","tmp","userInboxes","replies","content","includes","MessageCard","oneOnOne","clinic","subject","readAt","some","el","read","toChatroom","topicId","reply","EAGER_METHODS","useLazyQuery","query","internalState","useInternalState","useApolloClient","client","execOptionsRef","merged","mergeOptions","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdate","apply","this","arguments","_i","executeOptions","promise","asyncUpdate","then","queryResult","catch"],"sourceRoot":""}