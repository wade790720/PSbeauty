{"version":3,"file":"static/js/799.66f0366a.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/containers/CaseCard/CaseCard.module.scss?830e","containers/CaseCard/CaseCard.graphql.generated.ts","containers/CaseCard/index.tsx","hooks/useElementOnScreen.ts","webpack://psbeauty/./src/pages/Member/MemberCollectClinicalCase/MemberCollectClinicalCase.module.scss?c9e2","pages/Member/MemberCollectClinicalCase/MemberCollectClinicalCase.graphql.generated.ts","pages/Member/MemberCollectClinicalCase/index.tsx","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"CaseCard_wrapper__dUXdB\",\"title\":\"CaseCard_title__SQCWW\",\"collect-block\":\"CaseCard_collect-block__u8Sal\",\"bookmark-fill\":\"CaseCard_bookmark-fill__jUiSM\",\"bookmark-simple\":\"CaseCard_bookmark-simple__hWI99\",\"amount\":\"CaseCard_amount__zwm+S\",\"clinic\":\"CaseCard_clinic__lyURc\",\"content\":\"CaseCard_content__aYMVJ\",\"image\":\"CaseCard_image__oTTZQ\",\"tags\":\"CaseCard_tags__7Hmha\"};","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type CollectCaseMutationVariables = Types.Exact<{\n  caseId: Types.Scalars[\"String\"]\n}>\n\nexport type CollectCaseMutation = {\n  collectCase?: {\n    __typename: \"CollectCasePayload\"\n    userId?: string | null\n    collectedCount: number\n  } | null\n}\n\nexport type RemoveCollectedCaseMutationVariables = Types.Exact<{\n  caseId: Types.Scalars[\"String\"]\n}>\n\nexport type RemoveCollectedCaseMutation = {\n  removeCollectedCase?: {\n    __typename: \"RemoveCollectedCasePayload\"\n    userId?: string | null\n    collectedCount: number\n  } | null\n}\n\nexport const CollectCaseDocument = gql`\n  mutation CollectCase($caseId: String!) {\n    collectCase(input: { caseId: $caseId }) {\n      userId\n      collectedCount\n    }\n  }\n`\nexport type CollectCaseMutationFn = Apollo.MutationFunction<\n  CollectCaseMutation,\n  CollectCaseMutationVariables\n>\n\n/**\n * __useCollectCaseMutation__\n *\n * To run a mutation, you first call `useCollectCaseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCollectCaseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [collectCaseMutation, { data, loading, error }] = useCollectCaseMutation({\n *   variables: {\n *      caseId: // value for 'caseId'\n *   },\n * });\n */\nexport function useCollectCaseMutation(\n  baseOptions?: Apollo.MutationHookOptions<CollectCaseMutation, CollectCaseMutationVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<CollectCaseMutation, CollectCaseMutationVariables>(\n    CollectCaseDocument,\n    options,\n  )\n}\nexport type CollectCaseMutationHookResult = ReturnType<typeof useCollectCaseMutation>\nexport type CollectCaseMutationResult = Apollo.MutationResult<CollectCaseMutation>\nexport type CollectCaseMutationOptions = Apollo.BaseMutationOptions<\n  CollectCaseMutation,\n  CollectCaseMutationVariables\n>\nexport const RemoveCollectedCaseDocument = gql`\n  mutation RemoveCollectedCase($caseId: String!) {\n    removeCollectedCase(input: { caseId: $caseId }) {\n      userId\n      collectedCount\n    }\n  }\n`\nexport type RemoveCollectedCaseMutationFn = Apollo.MutationFunction<\n  RemoveCollectedCaseMutation,\n  RemoveCollectedCaseMutationVariables\n>\n\n/**\n * __useRemoveCollectedCaseMutation__\n *\n * To run a mutation, you first call `useRemoveCollectedCaseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveCollectedCaseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeCollectedCaseMutation, { data, loading, error }] = useRemoveCollectedCaseMutation({\n *   variables: {\n *      caseId: // value for 'caseId'\n *   },\n * });\n */\nexport function useRemoveCollectedCaseMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemoveCollectedCaseMutation,\n    RemoveCollectedCaseMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<RemoveCollectedCaseMutation, RemoveCollectedCaseMutationVariables>(\n    RemoveCollectedCaseDocument,\n    options,\n  )\n}\nexport type RemoveCollectedCaseMutationHookResult = ReturnType<\n  typeof useRemoveCollectedCaseMutation\n>\nexport type RemoveCollectedCaseMutationResult = Apollo.MutationResult<RemoveCollectedCaseMutation>\nexport type RemoveCollectedCaseMutationOptions = Apollo.BaseMutationOptions<\n  RemoveCollectedCaseMutation,\n  RemoveCollectedCaseMutationVariables\n>\n","import { useEffect, useLayoutEffect, useState, useRef } from \"react\"\nimport styled from \"./CaseCard.module.scss\"\nimport Icon from \"components/Icon\"\nimport useGo from \"components/Router/useGo\"\nimport { useAuth } from \"hooks/useAuth\"\nimport useElementOnScreen from \"hooks/useElementOnScreen\"\nimport {\n  useCollectCaseMutation,\n  useRemoveCollectedCaseMutation,\n} from \"./CaseCard.graphql.generated\"\n\nexport type CaseCardProps = {\n  title: string\n  clinic: string\n  clinicId: string\n  introduction: string\n  image: string\n  isCollected: boolean\n  tags?: string[]\n  amount?: number // 收藏人數\n  caseId: string\n  last: boolean\n  fetchMore?: () => void\n} & ReactProps.Component\n\nconst WIDTH_SESSION_KEY = \"case-card-width\"\n\nconst CaseCard = ({ ...props }: CaseCardProps) => {\n  const go = useGo()\n  const auth = useAuth()\n  const imageRef = useRef<HTMLDivElement>(null)\n  const [imageWidth, setImageWidth] = useState(\n    parseInt(sessionStorage.getItem(WIDTH_SESSION_KEY) || \"\", 10) || 0,\n  )\n  const [isCollected, setIsCollected] = useState(false)\n  const [amount, setAmount] = useState(props.amount)\n  const { containerRef, isVisible } = useElementOnScreen({})\n\n  useLayoutEffect(() => {\n    if (imageRef.current) {\n      setImageWidth(imageRef.current.clientWidth)\n      sessionStorage.setItem(WIDTH_SESSION_KEY, `${imageRef.current.clientWidth}`)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (props.last && isVisible && props.fetchMore) props.fetchMore()\n  }, [props.last, props.fetchMore, isVisible])\n\n  const [collectCaseMutation] = useCollectCaseMutation({\n    variables: {\n      caseId: props.caseId,\n    },\n    onCompleted: props => {\n      setIsCollected(true)\n      setAmount(props.collectCase?.collectedCount)\n    },\n  })\n\n  const [removeCollectCaseMutation] = useRemoveCollectedCaseMutation({\n    variables: {\n      caseId: props.caseId,\n    },\n    onCompleted: props => {\n      setIsCollected(false)\n      setAmount(props?.removeCollectedCase?.collectedCount)\n    },\n  })\n\n  useEffect(() => {\n    setIsCollected(props.isCollected)\n  }, [props.isCollected])\n\n  return (\n    <div\n      ref={props.last ? (containerRef as unknown as React.RefObject<HTMLDivElement>) : null}\n      className={styled.wrapper}\n      style={props.style}\n      onClick={() => go.toClinicCase({ clinicId: props.clinicId, caseId: props.caseId })}>\n      <div className={styled.title}>{props.title}</div>\n      <div className={styled.clinic}>{props.clinic}</div>\n      <div\n        className={styled.content}\n        dangerouslySetInnerHTML={{ __html: props.introduction || \"\" }}\n      />\n      <div className={styled.image} style={{ height: imageWidth }} ref={imageRef}>\n        <img src={props.image} />\n      </div>\n      <div className={styled.tags}>\n        {props.tags?.map((tag, idx) => (\n          <div key={`tag-${idx}`}>\n            <span>#</span>\n            {tag}\n          </div>\n        ))}\n      </div>\n      <div\n        className={styled[\"collect-block\"]}\n        onClick={e => {\n          e.stopPropagation()\n          if (!auth.user.id) return go.toSignIn()\n          isCollected ? removeCollectCaseMutation() : collectCaseMutation()\n        }}>\n        {isCollected ? (\n          <Icon name=\"BookmarkFill\" className={styled[\"bookmark-fill\"]} />\n        ) : (\n          <Icon name=\"BookmarkSimple\" className={styled[\"bookmark-simple\"]} />\n        )}\n        <div className={styled.amount}>{amount}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default CaseCard\n","import { useState, useRef, useEffect, useCallback } from \"react\"\n\ntype useElementOnScreenProps = {\n  root?: HTMLDivElement | null\n  rootMargin?: string\n  threshold?: number\n}\n\nconst useElementOnScreen = ({\n  root = null,\n  rootMargin = \"0px\",\n  threshold = 1.0,\n}: useElementOnScreenProps) => {\n  const [ready, setReady] = useState(false)\n  const targetRef = useRef<null | HTMLDivElement>(null)\n  const containerRef = useCallback((node: HTMLDivElement) => {\n    targetRef.current = node\n    setReady(!!node)\n  }, [])\n\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    if (!ready) return\n\n    const observer = new IntersectionObserver(\n      entries => {\n        const [entry] = entries\n        setIsVisible(entry.isIntersecting)\n      },\n      { root, rootMargin, threshold },\n    )\n\n    targetRef?.current && observer.observe(targetRef.current)\n\n    return () => {\n      targetRef?.current && observer.unobserve(targetRef.current)\n    }\n  }, [root, rootMargin, threshold, ready])\n\n  return { containerRef, isVisible }\n}\n\nexport default useElementOnScreen\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MemberCollectClinicalCase_wrapper__NGknA\",\"empty-card\":\"MemberCollectClinicalCase_empty-card__xOFQq\",\"empty\":\"MemberCollectClinicalCase_empty__xFrZ4\"};","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetMeQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetMeQuery = {\n  me?: {\n    __typename: \"User\"\n    userCollectedCases?: Array<{\n      __typename: \"ClinicCase\"\n      id?: string | null\n      title?: string | null\n      description?: string | null\n      image?: string | null\n      clinic?: { __typename: \"Clinic\"; id?: string | null; name?: string | null } | null\n      categories?: Array<{\n        __typename: \"Category\"\n        id?: string | null\n        name?: string | null\n      } | null> | null\n    } | null> | null\n  } | null\n}\n\nexport const GetMeDocument = gql`\n  query GetMe {\n    me {\n      userCollectedCases {\n        id\n        title\n        description\n        image\n        clinic {\n          id\n          name\n        }\n        categories {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetMeQuery__\n *\n * To run a query within a React component, call `useGetMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetMeQuery, GetMeQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetMeQuery, GetMeQueryVariables>(GetMeDocument, options)\n}\nexport function useGetMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetMeQuery, GetMeQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetMeQuery, GetMeQueryVariables>(GetMeDocument, options)\n}\nexport type GetMeQueryHookResult = ReturnType<typeof useGetMeQuery>\nexport type GetMeLazyQueryHookResult = ReturnType<typeof useGetMeLazyQuery>\nexport type GetMeQueryResult = Apollo.QueryResult<GetMeQuery, GetMeQueryVariables>\n","import cx from \"classnames\"\nimport styled from \"./MemberCollectClinicalCase.module.scss\"\nimport Header from \"components/Layout/Header\"\nimport CaseCard from \"containers/CaseCard\"\nimport { useGetMeQuery } from \"./MemberCollectClinicalCase.graphql.generated\"\nimport QueryStatus from \"components/QueryStatus\"\n\nconst MemberCollectClinicalCase = () => {\n  const { data, loading, error } = useGetMeQuery({ fetchPolicy: \"no-cache\" })\n\n  if (loading) return <QueryStatus.Loading />\n  if (error) return <QueryStatus.Error />\n  return (\n    <>\n      <Header title=\"收藏案例\" leftArrow />\n      <div\n        className={cx(styled.wrapper, { [styled.empty]: !data?.me?.userCollectedCases?.length })}>\n        <div className={styled[\"empty-card\"]}>尚無收藏案例</div>\n        {data?.me?.userCollectedCases?.map(el => (\n          <CaseCard\n            key={el?.id}\n            isCollected\n            title={el?.title || \"\"}\n            clinic={el?.clinic?.name || \"\"}\n            clinicId={el?.clinic?.id || \"\"}\n            introduction={el?.description || \"\"}\n            image={el?.image || \"\"}\n            tags={el?.categories?.map(el => el?.name || \"\")}\n            caseId={el?.id || \"\"}\n            last={false}\n          />\n        ))}\n      </div>\n    </>\n  )\n}\nexport default MemberCollectClinicalCase\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      ref.current.options?.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["style","props","navigate","useNavigate","text","useParams","className","cx","styled","title","children","leftArrow","onClick","redirect","Icon","name","defaultOptions","CollectCaseDocument","gql","RemoveCollectedCaseDocument","WIDTH_SESSION_KEY","go","useGo","auth","useAuth","imageRef","useRef","useState","parseInt","sessionStorage","getItem","imageWidth","setImageWidth","isCollected","setIsCollected","amount","setAmount","useElementOnScreen","containerRef","isVisible","useLayoutEffect","current","clientWidth","setItem","useEffect","last","fetchMore","baseOptions","options","Apollo","useCollectCaseMutation","variables","caseId","onCompleted","collectCase","collectedCount","collectCaseMutation","useRemoveCollectedCaseMutation","removeCollectedCase","removeCollectCaseMutation","ref","toClinicCase","clinicId","clinic","dangerouslySetInnerHTML","__html","introduction","height","src","image","tags","map","tag","idx","e","stopPropagation","user","id","toSignIn","root","rootMargin","threshold","ready","setReady","targetRef","useCallback","node","setIsVisible","observer","IntersectionObserver","entries","entry","isIntersecting","observe","unobserve","GetMeDocument","useGetMeQuery","fetchPolicy","data","loading","error","QueryStatus","Header","me","userCollectedCases","length","el","CaseCard","description","categories","useMutation","mutation","client","useApolloClient","verifyDocumentType","DocumentType","called","result","setResult","mutationId","isMounted","Object","assign","execute","executeOptions","ignoreResults","clientOptions","mergeOptions","mutate","then","response","errors","ApolloError","graphQLErrors","result_1","equal","_a","_b","_c","catch","result_2","onError","_d","reset","__assign"],"sourceRoot":""}