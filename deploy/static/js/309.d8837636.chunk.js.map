{"version":3,"file":"static/js/309.d8837636.chunk.js","mappings":"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","sources":["components/Modal/ModalPopup/index.tsx","webpack://psbeauty/./src/components/Modal/ModalDialog/ModalDialog.module.scss?9216","components/Modal/ModalDialog/index.tsx","webpack://psbeauty/./src/components/Modal/ModalHeader/ModalHeader.module.scss?68a2","components/Modal/ModalHeader/index.tsx","webpack://psbeauty/./src/components/Modal/ModalBody/ModalBody.module.scss?5b3c","components/Modal/ModalBody/index.tsx","webpack://psbeauty/./src/components/Modal/ModalFooter/ModalFooter.module.scss?a978","components/Modal/ModalFooter/index.tsx","components/Modal/Modal/index.tsx","components/Modal/withOpen.tsx","components/Modal/index.tsx","webpack://psbeauty/./src/containers/Profile/Profile.module.scss?24d0","containers/Profile/index.tsx","webpack://psbeauty/./src/pages/Doctor/Doctor.module.scss?db04","pages/Doctor/Doctor.graphql.generated.ts","pages/Doctor/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import Popup from \"reactjs-popup\"\nimport { PopupProps } from \"reactjs-popup/dist/types\"\n\nexport type ModalPopupProps = {\n  /**\n   * Should the modal appear on screen or not\n   */\n  open?: boolean\n  backdrop?: boolean\n} & Partial<Pick<PopupProps, \"open\" | \"closeOnDocumentClick\" | \"onClose\" | \"children\">>\n\nconst ModalPopup = ({ open = false, backdrop = true, ...props }: ModalPopupProps) => {\n  return (\n    <Popup\n      modal\n      nested\n      lockScroll\n      open={open}\n      closeOnDocumentClick={backdrop}\n      closeOnEscape\n      onClose={props.onClose}\n      contentStyle={{\n        background: \"transparent\",\n        border: \"none\",\n        width: \"auto\",\n      }}\n      overlayStyle={{\n        backgroundColor: \"#091e428a\",\n      }}>\n      {props.children}\n    </Popup>\n  )\n}\n\nexport default ModalPopup\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalDialog_wrapper__SJQv5\"};","import cx from \"classnames\"\nimport styled from \"./ModalDialog.module.scss\"\n\nexport type ModalDialogProps = ReactProps.Component\n\nconst ModalDialog = (props: ModalDialogProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={props.style}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default ModalDialog\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalHeader_wrapper__tVVhd\"};","import cx from \"classnames\"\nimport styled from \"./ModalHeader.module.scss\"\n\nexport type ModalHeaderProps = {\n  /**\n   * The Modal header.\n   */\n  title?: string\n} & ReactProps.Component\n\nconst ModalHeader = (props: ModalHeaderProps) => {\n  return (\n    <header className={cx(styled.wrapper, props.className)} style={props.style}>\n      <h1>{props.title}</h1>\n      {props.children}\n    </header>\n  )\n}\n\nexport default ModalHeader\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ModalBody_main__yFQS5\"};","import cx from \"classnames\"\nimport styled from \"./ModalBody.module.scss\"\n\nexport type ModalBodyProps = {\n  /**\n   * The Modal content. (props.children > props.content)\n   */\n  content?: string\n} & ReactProps.Component\n\nconst ModalBody = (props: ModalBodyProps) => {\n  return (\n    <main className={cx(styled.main, props.className)} style={props.style}>\n      {props.children || props.content}\n    </main>\n  )\n}\n\nexport default ModalBody\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalFooter_wrapper__eBzg3\",\"disabled\":\"ModalFooter_disabled__U85L9\"};","import cx from \"classnames\"\nimport styled from \"./ModalFooter.module.scss\"\n\nexport type ModalFooterProps = {\n  /**\n   * The text for confirm button.\n   */\n  confirmText?: string\n  /**\n   * The props for confirm button.\n   */\n  confirmButtonProps?: JSX.IntrinsicElements[\"button\"]\n  /**\n   * A callback triggered whenever the modal is confirmed.\n   */\n  onConfirm?: () => void\n  /**\n   * The text for cancel button, if text is null button will be hidden\n   */\n  cancelText?: string | null\n  /**\n   * The props for cancel button.\n   */\n  cancelButtonProps?: JSX.IntrinsicElements[\"button\"]\n  /**\n   * A callback triggered whenever the cancel button clicked.\n   */\n  onCancel?: () => void\n  /**\n   * A callback triggered whenever the modal is closed.\n   */\n  onClose?: () => void\n} & ReactProps.Component\n\nconst ModalFooter = (props: ModalFooterProps) => {\n  const handleConfirm = () => {\n    props.onConfirm && props.onConfirm()\n    props.onClose && props.onClose()\n  }\n\n  const handleCancel = () => {\n    props.onCancel && props.onCancel()\n    props.onClose && props.onClose()\n  }\n\n  return (\n    <footer className={cx(styled.wrapper, props.className)} style={props.style}>\n      {!!props.cancelText && (\n        <div\n          onClick={handleCancel}\n          className={cx({ [styled.disabled]: props.cancelButtonProps?.disabled })}>\n          {props.cancelText}\n        </div>\n      )}\n      {!!props.confirmText && (\n        <div\n          onClick={handleConfirm}\n          className={cx({ [styled.disabled]: props.confirmButtonProps?.disabled })}>\n          {props.confirmText}\n        </div>\n      )}\n    </footer>\n  )\n}\n\nexport default ModalFooter\n","import ModalPopup from \"../ModalPopup\"\nimport ModalDialog from \"../ModalDialog\"\nimport Header from \"../ModalHeader\"\nimport Body from \"../ModalBody\"\nimport Footer from \"../ModalFooter\"\nimport { ModalPopupProps } from \"../ModalPopup\"\nimport { ModalBodyProps } from \"../ModalBody\"\nimport { ModalHeaderProps } from \"../ModalHeader\"\nimport { ModalFooterProps } from \"../ModalFooter\"\nimport { PopupProps } from \"reactjs-popup/dist/types\"\n\nexport type ModalProps = ModalPopupProps &\n  ModalBodyProps &\n  ModalHeaderProps &\n  ModalFooterProps &\n  Partial<Pick<PopupProps, \"open\" | \"closeOnDocumentClick\" | \"onClose\" | \"children\">>\n\nconst Modal = (props: ModalProps) => {\n  return (\n    <ModalPopup open={props.open} closeOnDocumentClick={props.backdrop} onClose={props.onClose}>\n      <ModalDialog>\n        <Header title={props.title} />\n        <Body content={props.content}>{props.children}</Body>\n        <Footer\n          confirmText={props.confirmText}\n          confirmButtonProps={props.confirmButtonProps}\n          cancelText={props.cancelText}\n          cancelButtonProps={props.cancelButtonProps}\n          onConfirm={props.onConfirm}\n          onCancel={props.onCancel}\n          onClose={props.onClose}\n        />\n      </ModalDialog>\n    </ModalPopup>\n  )\n}\n\nexport default Modal\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ModalProps } from \"./Modal\"\n\nexport const getPopupRoot = () => {\n  let popupRoot = document.getElementById(\"popup-root\")\n  if (!popupRoot) {\n    popupRoot = document.createElement(\"div\")\n    popupRoot.setAttribute(\"id\", \"popup-root\")\n    document.body.appendChild(popupRoot)\n  }\n  return popupRoot\n}\n\nexport function open(Modal: React.FC<ModalProps>, config: ModalProps) {\n  const modalRoot = getPopupRoot()\n  const modalDiv = document.createElement(\"div\")\n  modalRoot.appendChild(modalDiv)\n\n  function bindClose(config: ModalProps) {\n    const { onConfirm, onCancel, onClose, ...theOtherConfig } = config\n    const bind = (fn?: () => void) =>\n      fn\n        ? () => {\n            typeof fn === \"function\" && fn()\n            close()\n          }\n        : close\n\n    return {\n      ...theOtherConfig,\n      onConfirm: bind(onConfirm),\n      onCancel: bind(onCancel),\n      onClose: bind(onClose),\n    }\n  }\n\n  function render(config: ModalProps) {\n    ReactDOM.render(<Modal {...bindClose(config)} />, modalDiv)\n  }\n\n  function update(newConfig: ModalProps) {\n    render({\n      ...config,\n      ...newConfig,\n      open: true,\n    })\n  }\n\n  function close() {\n    render({\n      ...config,\n      open: false,\n    })\n  }\n\n  render({\n    ...config,\n    open: true,\n  })\n\n  return {\n    destroy: close,\n    update,\n  }\n}\n\nexport function withAlert(config: ModalProps) {\n  return {\n    ...config,\n    cancelText: null,\n  }\n}\n\nexport function withConfirm(config: ModalProps) {\n  return {\n    ...config,\n    cancelText: config.cancelText,\n  }\n}\n","import ModalBase, { ModalProps } from \"./Modal\"\nimport CustomModal from \"./CustomModal\"\nimport ModalDialog from \"./ModalDialog\"\nimport ModalHeader from \"./ModalHeader\"\nimport ModalBody from \"./ModalBody\"\nimport ModalFooter from \"./ModalFooter\"\nimport { open, withAlert, withConfirm } from \"./withOpen\"\n\nexport type { ModalProps } from \"./Modal\"\nexport type { CustomModalProps } from \"./CustomModal\"\nexport type { ModalHeaderProps } from \"./ModalHeader\"\nexport type { ModalFooterProps } from \"./ModalFooter\"\n\nconst Modal = Object.assign(ModalBase, {\n  alert: (config: ModalProps) => open(ModalBase, withAlert(config)),\n  confirm: (config: ModalProps) => open(ModalBase, withConfirm(config)),\n  Dialog: ModalDialog,\n  Header: ModalHeader,\n  Body: ModalBody,\n  Footer: ModalFooter,\n})\n\nexport { CustomModal }\nexport default Modal\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Profile_wrapper__r3jTF\",\"avatar\":\"Profile_avatar__xyyqj\",\"username\":\"Profile_username__2YFrb\",\"hint\":\"Profile_hint__xL3J2\",\"enhance\":\"Profile_enhance__O0aWp\",\"chat\":\"Profile_chat__hJK6i\",\"chat-unread\":\"Profile_chat-unread__hBtH+\"};","import styled from \"./Profile.module.scss\"\nimport Icon from \"components/Icon\"\nimport { useGo } from \"components/Router\"\nimport { useAuth } from \"hooks/useAuth\"\nimport { useEffect } from \"react\"\nimport { useGetMemberInboxLazyQuery } from \"pages/Member/MemberInbox/MemberInbox.graphql.generated\"\nimport Colors from \"./colors.json\"\n\nconst getBackgroundColor = () => {\n  const AVATAR_COLOR = \"avatar-color\"\n  let index = parseInt(`${localStorage.getItem(AVATAR_COLOR)}`, 10)\n  if (!index) {\n    index = Math.round(Math.random() * 1000)\n    localStorage.setItem(AVATAR_COLOR, `${index}`)\n  }\n  return Colors[index % Colors.length]\n}\n\nconst Profile = () => {\n  const go = useGo()\n  const auth = useAuth()\n  const [loadMemberInboxQuery, getMemberInboxQuery] = useGetMemberInboxLazyQuery()\n  const backgroundColor = getBackgroundColor()\n  const userEmail = auth.user.email || \"Unknown\"\n  const userName = auth.user.name || \"未命名\"\n  const consults = getMemberInboxQuery.data?.me?.consults || []\n\n  useEffect(() => {\n    if (auth.user.id) {\n      loadMemberInboxQuery()\n    }\n  }, [auth.user.id, loadMemberInboxQuery])\n\n  return (\n    <div className={styled.wrapper}>\n      <div className={styled.avatar} style={{ background: backgroundColor }}>\n        {userEmail[0].toUpperCase()}\n      </div>\n      <div className={styled.username}>{userName}</div>\n\n      {!auth.user.clinic && (\n        <div\n          className={styled.chat}\n          onClick={() => {\n            auth.user.clinic ? go.toDoctorInbox() : go.toMemberInbox()\n          }}>\n          <Icon name=\"Chat\" />\n          {consults.length > 1 &&\n            consults?.map(consult => consult?.userInboxes?.some(el => !el?.read)) && (\n              <div className={styled[\"chat-unread\"]} />\n            )}\n        </div>\n      )}\n    </div>\n  )\n}\nexport default Profile\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Doctor_wrapper__HLY5y\"};","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetTopCategoriesQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetTopCategoriesQuery = {\n  topCategories?: Array<{\n    __typename: \"TopCategory\"\n    name?: string | null\n    secondCategories?: Array<{\n      __typename: \"SecondCategory\"\n      name?: string | null\n      categories?: Array<{\n        __typename: \"Category\"\n        id?: string | null\n        name?: string | null\n      } | null> | null\n    } | null> | null\n  } | null> | null\n}\n\nexport type UpdateClinicCategoryMutationVariables = Types.Exact<{\n  categories?: Types.InputMaybe<\n    Array<Types.InputMaybe<Types.Scalars[\"String\"]>> | Types.InputMaybe<Types.Scalars[\"String\"]>\n  >\n}>\n\nexport type UpdateClinicCategoryMutation = {\n  updateClinicCategory?: { __typename: \"UpdateClinicCategoryPayload\"; id?: string | null } | null\n}\n\nexport type GetMyClinicQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetMyClinicQuery = {\n  myClinic?: {\n    __typename: \"Clinic\"\n    categories?: Array<{\n      __typename: \"Category\"\n      id?: string | null\n      name?: string | null\n    } | null> | null\n  } | null\n}\n\nexport const GetTopCategoriesDocument = gql`\n  query GetTopCategories {\n    topCategories {\n      name\n      secondCategories {\n        name\n        categories {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetTopCategoriesQuery__\n *\n * To run a query within a React component, call `useGetTopCategoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTopCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTopCategoriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTopCategoriesQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>(\n    GetTopCategoriesDocument,\n    options,\n  )\n}\nexport function useGetTopCategoriesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>(\n    GetTopCategoriesDocument,\n    options,\n  )\n}\nexport type GetTopCategoriesQueryHookResult = ReturnType<typeof useGetTopCategoriesQuery>\nexport type GetTopCategoriesLazyQueryHookResult = ReturnType<typeof useGetTopCategoriesLazyQuery>\nexport type GetTopCategoriesQueryResult = Apollo.QueryResult<\n  GetTopCategoriesQuery,\n  GetTopCategoriesQueryVariables\n>\nexport const UpdateClinicCategoryDocument = gql`\n  mutation UpdateClinicCategory($categories: [String]) {\n    updateClinicCategory(input: { categories: $categories }) {\n      id\n    }\n  }\n`\nexport type UpdateClinicCategoryMutationFn = Apollo.MutationFunction<\n  UpdateClinicCategoryMutation,\n  UpdateClinicCategoryMutationVariables\n>\n\n/**\n * __useUpdateClinicCategoryMutation__\n *\n * To run a mutation, you first call `useUpdateClinicCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateClinicCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateClinicCategoryMutation, { data, loading, error }] = useUpdateClinicCategoryMutation({\n *   variables: {\n *      categories: // value for 'categories'\n *   },\n * });\n */\nexport function useUpdateClinicCategoryMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateClinicCategoryMutation,\n    UpdateClinicCategoryMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<UpdateClinicCategoryMutation, UpdateClinicCategoryMutationVariables>(\n    UpdateClinicCategoryDocument,\n    options,\n  )\n}\nexport type UpdateClinicCategoryMutationHookResult = ReturnType<\n  typeof useUpdateClinicCategoryMutation\n>\nexport type UpdateClinicCategoryMutationResult = Apollo.MutationResult<UpdateClinicCategoryMutation>\nexport type UpdateClinicCategoryMutationOptions = Apollo.BaseMutationOptions<\n  UpdateClinicCategoryMutation,\n  UpdateClinicCategoryMutationVariables\n>\nexport const GetMyClinicDocument = gql`\n  query GetMyClinic {\n    myClinic {\n      categories {\n        id\n        name\n      }\n    }\n  }\n`\n\n/**\n * __useGetMyClinicQuery__\n *\n * To run a query within a React component, call `useGetMyClinicQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMyClinicQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMyClinicQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMyClinicQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetMyClinicQuery, GetMyClinicQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetMyClinicQuery, GetMyClinicQueryVariables>(GetMyClinicDocument, options)\n}\nexport function useGetMyClinicLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetMyClinicQuery, GetMyClinicQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetMyClinicQuery, GetMyClinicQueryVariables>(\n    GetMyClinicDocument,\n    options,\n  )\n}\nexport type GetMyClinicQueryHookResult = ReturnType<typeof useGetMyClinicQuery>\nexport type GetMyClinicLazyQueryHookResult = ReturnType<typeof useGetMyClinicLazyQuery>\nexport type GetMyClinicQueryResult = Apollo.QueryResult<GetMyClinicQuery, GetMyClinicQueryVariables>\n","import { useState, useEffect } from \"react\"\nimport Button from \"components/Button\"\nimport Profile from \"containers/Profile\"\nimport Toolbars from \"containers/Toolbars\"\nimport { useGo } from \"components/Router\"\nimport { useAuth } from \"hooks/useAuth\"\nimport Modal from \"components/Modal\"\nimport QueryStatus from \"components/QueryStatus\"\nimport SubjectFilter from \"containers/SubjectFilter\"\nimport { sentResetPassword } from \"firebaseClient\"\nimport styled from \"./Doctor.module.scss\"\nimport {\n  useGetTopCategoriesLazyQuery,\n  useUpdateClinicCategoryMutation,\n  useGetMyClinicLazyQuery,\n} from \"./Doctor.graphql.generated\"\n\nconst DEFAULT_MODAL_MSG = {\n  title: \"寄送認證郵件\",\n  content: \"將密碼認證信寄至註冊信箱\",\n  confirm: \"發送\",\n  cancel: \"取消\",\n}\n\nconst Doctor = () => {\n  const go = useGo()\n  const auth = useAuth()\n  const [open, setOpen] = useState(false)\n  const [filterOpen, setFilterOpen] = useState(false)\n  const [modalMsg, setModalMsg] = useState(DEFAULT_MODAL_MSG)\n  const [loadQuery, query] = useGetTopCategoriesLazyQuery()\n  const [loadClinic, queryClinic] = useGetMyClinicLazyQuery()\n  const [updateClinicCategoryMutation] = useUpdateClinicCategoryMutation()\n\n  useEffect(() => {\n    if (!filterOpen) return\n    loadQuery()\n  }, [filterOpen])\n\n  if (query.error) return <QueryStatus.Error />\n  return (\n    <>\n      {query.loading ? (\n        <QueryStatus.Loading />\n      ) : (\n        <>\n          <Profile />\n          <div className={styled.wrapper}>\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                loadClinic({ fetchPolicy: \"no-cache\" })\n\n                setFilterOpen(true)\n              }}>\n              專長項目\n            </Button>\n            <Button variant=\"secondary\" onClick={() => setOpen(true)}>\n              修改密碼\n            </Button>\n            <Modal\n              title={modalMsg.title}\n              open={open}\n              confirmText={modalMsg.confirm}\n              cancelText={modalMsg.cancel}\n              onConfirm={async () => {\n                try {\n                  if (auth?.user?.email) {\n                    await sentResetPassword(auth?.user?.email)\n                    setModalMsg({\n                      ...modalMsg,\n                      title: \"發送成功\",\n                      content: \"請至註冊信箱查收新密碼\",\n                      confirm: \"\",\n                      cancel: \"關閉\",\n                    })\n                  }\n                } catch {\n                  setModalMsg({\n                    ...modalMsg,\n                    title: \"發送失敗\",\n                    content: \"請重新發送\",\n                    confirm: \"\",\n                    cancel: \"關閉\",\n                  })\n                }\n\n                setOpen(true)\n              }}\n              onCancel={() => {\n                setModalMsg(DEFAULT_MODAL_MSG)\n                setOpen(false)\n              }}>\n              {modalMsg.content}\n            </Modal>\n            <div />\n            <Button\n              variant=\"text\"\n              onClick={() => {\n                auth.signOut()\n                go.toHome()\n              }}>\n              登出\n            </Button>\n            <SubjectFilter\n              open={filterOpen}\n              onClose={() => setFilterOpen(false)}\n              getValue={value => {\n                updateClinicCategoryMutation({\n                  variables: {\n                    categories: value.map(el => el.id || \"\"),\n                  },\n                })\n              }}\n              topCategoriesQuery={query}\n              defaultValue={\n                queryClinic?.data?.myClinic?.categories?.map(el => ({\n                  id: el?.id || \"\",\n                  name: el?.name || \"\",\n                })) || []\n              }\n            />\n          </div>\n        </>\n      )}\n\n      <Toolbars.Clinic />\n    </>\n  )\n}\nexport default Doctor\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"names":["open","backdrop","props","modal","nested","lockScroll","closeOnDocumentClick","closeOnEscape","onClose","contentStyle","background","border","width","overlayStyle","backgroundColor","children","className","cx","styled","style","title","content","cancelText","onClick","onCancel","cancelButtonProps","disabled","confirmText","onConfirm","confirmButtonProps","Modal","config","modalRoot","popupRoot","document","getElementById","createElement","setAttribute","body","appendChild","getPopupRoot","modalDiv","render","ReactDOM","theOtherConfig","bind","fn","close","bindClose","destroy","update","newConfig","Object","assign","ModalBase","alert","withAlert","confirm","withConfirm","Dialog","ModalDialog","Header","ModalHeader","Body","ModalBody","Footer","ModalFooter","go","useGo","auth","useAuth","useGetMemberInboxLazyQuery","loadMemberInboxQuery","getMemberInboxQuery","AVATAR_COLOR","index","parseInt","localStorage","getItem","Math","round","random","setItem","Colors","getBackgroundColor","userEmail","user","email","userName","name","consults","data","me","useEffect","id","toUpperCase","clinic","toDoctorInbox","toMemberInbox","Icon","length","map","consult","userInboxes","some","el","read","defaultOptions","GetTopCategoriesDocument","gql","UpdateClinicCategoryDocument","GetMyClinicDocument","DEFAULT_MODAL_MSG","cancel","useState","setOpen","filterOpen","setFilterOpen","modalMsg","setModalMsg","baseOptions","options","Apollo","useGetTopCategoriesLazyQuery","loadQuery","query","useGetMyClinicLazyQuery","loadClinic","queryClinic","useUpdateClinicCategoryMutation","updateClinicCategoryMutation","error","QueryStatus","loading","Profile","Button","variant","fetchPolicy","sentResetPassword","signOut","toHome","SubjectFilter","getValue","value","variables","categories","topCategoriesQuery","defaultValue","myClinic","Toolbars","EAGER_METHODS","useLazyQuery","internalState","useInternalState","useApolloClient","client","execOptionsRef","useRef","merged","current","mergeOptions","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","called","eagerMethods","useMemo","key","method","create","forceUpdate","apply","this","arguments","_i","useCallback","executeOptions","promise","asyncUpdate","then","queryResult","catch"],"sourceRoot":""}