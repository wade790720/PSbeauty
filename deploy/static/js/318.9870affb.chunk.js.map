{"version":3,"file":"static/js/318.9870affb.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Layout/Backdrop/Backdrop.module.scss?d14b","components/Layout/Backdrop/index.tsx","graphql/queries/getPopularKeywords.graphql.generated.ts","webpack://psbeauty/./src/pages/SearchList/SearchList.module.scss?6d63","pages/SearchList/SearchList.graphql.generated.ts","pages/SearchList/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Backdrop_wrapper__LB3Yk\"};","import styled from \"./Backdrop.module.scss\"\nimport cx from \"classnames\"\n\nexport type BackdropProps = ReactProps.Component\n\nconst Backdrop = ({ style = {}, ...props }: BackdropProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={{ ...style }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Backdrop\n","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetPopularKeywordsQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetPopularKeywordsQuery = {\n  popularKeywords?: { __typename: \"PopularKeywords\"; keywords?: Array<string | null> | null } | null\n}\n\nexport const GetPopularKeywordsDocument = gql`\n  query getPopularKeywords {\n    popularKeywords {\n      keywords\n    }\n  }\n`\n\n/**\n * __useGetPopularKeywordsQuery__\n *\n * To run a query within a React component, call `useGetPopularKeywordsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPopularKeywordsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPopularKeywordsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPopularKeywordsQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetPopularKeywordsQuery, GetPopularKeywordsQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetPopularKeywordsQuery, GetPopularKeywordsQueryVariables>(\n    GetPopularKeywordsDocument,\n    options,\n  )\n}\nexport function useGetPopularKeywordsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetPopularKeywordsQuery,\n    GetPopularKeywordsQueryVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetPopularKeywordsQuery, GetPopularKeywordsQueryVariables>(\n    GetPopularKeywordsDocument,\n    options,\n  )\n}\nexport type GetPopularKeywordsQueryHookResult = ReturnType<typeof useGetPopularKeywordsQuery>\nexport type GetPopularKeywordsLazyQueryHookResult = ReturnType<\n  typeof useGetPopularKeywordsLazyQuery\n>\nexport type GetPopularKeywordsQueryResult = Apollo.QueryResult<\n  GetPopularKeywordsQuery,\n  GetPopularKeywordsQueryVariables\n>\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SearchList_wrapper__97RaD\",\"filters\":\"SearchList_filters__s5oAV\",\"active\":\"SearchList_active__BIyUD\",\"result\":\"SearchList_result__KNoOt\",\"cell\":\"SearchList_cell__OjNa7\",\"cover\":\"SearchList_cover__BMOew\",\"title\":\"SearchList_title__l2bvX\",\"a-style\":\"SearchList_a-style__sCkYr\",\"empty\":\"SearchList_empty__T0OwZ\"};","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetSearchListQueryVariables = Types.Exact<{\n  contains: Types.Scalars[\"String\"]\n}>\n\nexport type GetSearchListQuery = {\n  cases?: {\n    __typename: \"CasesConnection\"\n    pageInfo: {\n      __typename: \"PageInfo\"\n      hasNextPage: boolean\n      hasPreviousPage: boolean\n      startCursor?: string | null\n      endCursor?: string | null\n    }\n    edges?: Array<{\n      __typename: \"CasesEdge\"\n      cursor: string\n      node?: {\n        __typename: \"ClinicCase\"\n        id?: string | null\n        title?: string | null\n        image?: string | null\n        imageText?: string | null\n        clinic?: { __typename: \"Clinic\"; id?: string | null } | null\n      } | null\n    }> | null\n  } | null\n}\n\nexport const GetSearchListDocument = gql`\n  query getSearchList($contains: String!) {\n    cases(where: { or: [{ imageText: { contains: $contains } }] }, first: 50, order: { id: DESC }) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          title\n          image\n          imageText\n          clinic {\n            id\n          }\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetSearchListQuery__\n *\n * To run a query within a React component, call `useGetSearchListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSearchListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSearchListQuery({\n *   variables: {\n *      contains: // value for 'contains'\n *   },\n * });\n */\nexport function useGetSearchListQuery(\n  baseOptions: Apollo.QueryHookOptions<GetSearchListQuery, GetSearchListQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetSearchListQuery, GetSearchListQueryVariables>(\n    GetSearchListDocument,\n    options,\n  )\n}\nexport function useGetSearchListLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetSearchListQuery, GetSearchListQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetSearchListQuery, GetSearchListQueryVariables>(\n    GetSearchListDocument,\n    options,\n  )\n}\nexport type GetSearchListQueryHookResult = ReturnType<typeof useGetSearchListQuery>\nexport type GetSearchListLazyQueryHookResult = ReturnType<typeof useGetSearchListLazyQuery>\nexport type GetSearchListQueryResult = Apollo.QueryResult<\n  GetSearchListQuery,\n  GetSearchListQueryVariables\n>\n","import { useParams, useNavigate, useSearchParams } from \"react-router-dom\"\nimport styled from \"./SearchList.module.scss\"\nimport cx from \"classnames\"\nimport Backdrop from \"components/Layout/Backdrop\"\nimport { useGetSearchListLazyQuery } from \"./SearchList.graphql.generated\"\nimport { useGetPopularKeywordsQuery } from \"graphql/queries/getPopularKeywords.graphql.generated\"\nimport { useEffect } from \"react\"\nimport { useGo } from \"components/Router\"\nimport QueryStatus from \"components/QueryStatus\"\n\nconst SearchList = () => {\n  const [searchParams, setSearchParams] = useSearchParams()\n  const { text } = useParams()\n  const navigate = useNavigate()\n  const go = useGo()\n  const tag = searchParams.get(\"tag\")\n\n  const [loadQuery, { data, loading, error }] = useGetSearchListLazyQuery()\n  const getPopularKeywords = useGetPopularKeywordsQuery()\n\n  useEffect(() => {\n    if (!(tag || text)) return\n    loadQuery({\n      variables: {\n        contains: `${tag || text}`,\n      },\n    })\n  }, [text, searchParams, loadQuery])\n\n  if (loading) return <QueryStatus.Loading />\n  if (error) return <QueryStatus.Error />\n\n  return (\n    <Backdrop className={styled.wrapper}>\n      <div className={styled.filters}>\n        {getPopularKeywords?.data?.popularKeywords?.keywords?.map((el, idx) => (\n          <div\n            className={cx({ [styled.active]: tag === el })}\n            key={`keywords-${idx}`}\n            onClick={() => {\n              if (el) {\n                if (tag === el) {\n                  navigate(-1)\n                } else {\n                  setSearchParams({ tag: el }, { replace: !!tag })\n                }\n              }\n            }}>\n            {el}\n          </div>\n        ))}\n      </div>\n      <div className={styled.result}>\n        {data?.cases?.edges && data?.cases?.edges?.length > 0 ? (\n          data?.cases?.edges.map((el, idx) => (\n            <div\n              key={el.node?.id}\n              onClick={() =>\n                go.toClinicCase({\n                  clinicId: el.node?.clinic?.id || \"\",\n                  caseId: el.node?.id || \"\",\n                })\n              }\n              className={cx(styled.cell, styled[`${\"axxxxxxaxxxx\"[idx % 12]}-style`])}>\n              <img src={el.node?.image || \"\"} />\n              <div className={styled.cover} />\n              <div className={styled.title}>\n                {el.node?.imageText?.includes(tag || text || \"\") && el.node?.imageText}\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className={styled.empty}>暫無資料顯示</div>\n        )}\n      </div>\n    </Backdrop>\n  )\n}\nexport default SearchList\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"names":["style","props","className","cx","styled","children","defaultOptions","GetPopularKeywordsDocument","gql","useGetPopularKeywordsQuery","baseOptions","options","Apollo","GetSearchListDocument","useSearchParams","searchParams","setSearchParams","text","useParams","navigate","useNavigate","go","useGo","tag","get","useGetSearchListLazyQuery","loadQuery","data","loading","error","getPopularKeywords","useEffect","variables","contains","QueryStatus","Backdrop","popularKeywords","keywords","map","el","idx","onClick","replace","cases","edges","length","toClinicCase","clinicId","node","clinic","id","caseId","src","image","imageText","includes","EAGER_METHODS","useLazyQuery","query","internalState","useInternalState","useApolloClient","client","execOptionsRef","useRef","merged","current","mergeOptions","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","useMemo","key","method","create","forceUpdate","apply","this","arguments","_i","useCallback","executeOptions","fetchPolicy","promise","asyncUpdate","then","queryResult","catch"],"sourceRoot":""}