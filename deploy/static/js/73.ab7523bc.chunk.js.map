{"version":3,"file":"static/js/73.ab7523bc.chunk.js","mappings":"gKACA,EAA0B,0B,wCCY1B,EARiB,SAAC,GAA6C,IAAD,IAA1CA,MAAAA,OAA0C,MAAlC,GAAkC,EAA3BC,GAA2B,YAC5D,OACE,gBAAKC,UAAWC,GAAAA,CAAGC,EAAgBH,EAAMC,WAAYF,OAAK,UAAOA,GAAjE,SACGC,EAAMI,a,uFCPb,EAA0B,wBAA1B,EAA0D,sBAA1D,EAAwF,sBAAxF,EAAqH,qBAArH,EAAkJ,sBAAlJ,EAAmL,yB,4DC0CnL,EA/Be,SAAC,GAA2C,IAAD,MAAxCL,MAAAA,OAAwC,MAAhC,GAAgC,EAAzBC,GAAyB,YAClDK,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,MAATD,KAER,OACE,iBACEN,UAAWC,GAAAA,CAAGC,EAAgBH,EAAMC,WAAvB,eACVE,EAAeH,EAAMS,OAAST,EAAMI,WAD1B,SAEVD,GAAgBH,EAAMS,QAAUT,EAAMU,WAF5B,IAIbX,OAAK,UAAOA,GALd,UAMGC,EAAMU,YACL,gBACEC,QAAS,kBAAOX,EAAMY,SAAWZ,EAAMY,WAAoBP,EAAPE,GAAiB,GAAe,IADtF,UAEE,SAACM,EAAA,EAAD,CAAMZ,UAAWE,EAAgBW,KAAK,gBAGzCd,EAAMS,OACL,gBACER,UAAWC,GAAAA,CAAGC,GAAD,UACVA,EAAqBH,EAAMU,YAFhC,SAIGV,EAAMS,QAGTT,EAAMI,c,oGCpCd,EAA0B,gCAA1B,EAAgE,4BAAhE,EAAoG,8BAApG,EAA4I,gC,qECGtIW,EAAiB,GAoBVC,GAAoBC,EAAAA,EAAAA,IAAH,uN,aCgB9B,EAhCuB,WAAO,IAAD,MAC3B,GAA2BT,EAAAA,EAAAA,MAAnBU,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,WACZ,EDmDK,SACLC,GAEA,IAAMC,GAAO,kBAAQN,GAAmBK,GACxC,OAAOE,EAAAA,EAA6DN,EAAmBK,GCvDzCE,GAA9C,eAAOC,EAAP,YAAoBC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,MAUnC,IARAC,EAAAA,EAAAA,YAAU,WACRJ,EAAU,CACRK,UAAW,CACTX,GAAIA,GAAM,QAGb,CAACM,EAAWN,IAEXQ,EAAS,OAAO,SAACI,EAAA,UAAD,IACpB,GAAIH,EAAO,OAAO,SAACG,EAAA,QAAD,IAElB,IAAMC,EAAU,OAAGN,QAAH,IAAGA,GAAH,UAAGA,EAAMO,cAAT,iBAAG,EAAcD,kBAAjB,aAAG,EAA0BE,QAAO,SAAAC,GAAE,OAAM,OAAFA,QAAE,IAAFA,OAAA,EAAAA,EAAIhB,MAAOC,KAAY,GAEjF,OACE,iCACE,SAACgB,EAAA,EAAD,CAAQzB,WAAS,EAACD,OAAW,OAAJgB,QAAI,IAAJA,GAAA,UAAAA,EAAMO,cAAN,eAAclB,OAAQ,MAC/C,UAACsB,EAAA,EAAD,CAAUnC,UAAWE,EAArB,WACE,sDACA,gBAAKF,UAAWE,EAAYkC,KAAe,OAAVN,QAAU,IAAVA,OAAA,EAAAA,EAAYO,QAAS,MACtD,gBAAKrC,UAAWE,EAAhB,gBAA+B4B,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAYQ,WAC3C,gBACEtC,UAAWE,EACXqC,wBAAyB,CAAEC,QAAkB,OAAVV,QAAU,IAAVA,OAAA,EAAAA,EAAYW,UAAW,c,2GClB9DC,EAAgB,CACpB,UACA,YACA,YACA,cACA,eACA,mBAGI,SAAUC,EACdC,EACAxB,GAEA,IAAMyB,GAAgBC,EAAAA,EAAAA,IACpBC,EAAAA,EAAAA,GAAgB3B,GAAWA,EAAQ4B,QACnCJ,GAGIK,GAAiBC,EAAAA,EAAAA,UACjBC,EAASF,EAAeG,SAC1BC,EAAAA,EAAAA,GAAajC,EAAS6B,EAAeG,SACrChC,EAEEkC,EAAiBT,EAAcU,UAAQC,EAAAA,EAAAA,KAACA,EAAAA,EAAAA,IAAAA,GACzCL,GAAM,CACTM,MAAOR,EAAeG,WAGlBM,EACJJ,EAAeK,WAAWvC,QAAQsC,oBAClCb,EAAce,wBAEVC,EACJC,OAAOC,OAAOT,EAAgB,CAC5BU,SAAUf,EAAeG,UAIvBa,GAAeC,EAAAA,EAAAA,UAAQ,WAE3B,IADA,IAAMD,EAAoC,G,WAC/BE,GACT,IAAMC,EAASP,EAAOM,GACtBF,EAAaE,GAAO,WAMlB,OALKlB,EAAeG,UAClBH,EAAeG,QAAUU,OAAOO,OAAO,MAEvCxB,EAAcyB,eAETF,EAAOG,MAAMC,KAAMC,aARZ,MAAA/B,EAAAgC,EAAAA,EAAAA,OAAAA,IAAa,C,EAAjB,MAYd,OAAOT,IACN,IAyBH,OAvBAH,OAAOC,OAAOF,EAAQI,GAuBf,EArBSU,EAAAA,EAAAA,cAEd,SAAAC,GACA3B,EAAeG,QAAUwB,GAAgBpB,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAAA,GACpCoB,GAAc,CACjBC,YAAaD,EAAeC,aAAenB,IACzC,CACFmB,YAAanB,GAGf,IAAMoB,EAAUjC,EACbkC,cACAC,MAAK,SAAAC,GAAe,OAAAnB,OAAOC,OAAOkB,EAAahB,MAMlD,OAFAa,EAAQI,OAAM,eAEPJ,IACN,IAEcjB","sources":["webpack://psbeauty/./src/components/Layout/Backdrop/Backdrop.module.scss?d14b","components/Layout/Backdrop/index.tsx","webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/pages/Clinic/ClinicActivity/ClinicActivity.module.scss?f69e","pages/Clinic/ClinicActivity/ClinicActivity.graphql.generated.ts","pages/Clinic/ClinicActivity/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Backdrop_wrapper__LB3Yk\"};","import styled from \"./Backdrop.module.scss\"\nimport cx from \"classnames\"\n\nexport type BackdropProps = ReactProps.Component\n\nconst Backdrop = ({ style = {}, ...props }: BackdropProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={{ ...style }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Backdrop\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ClinicActivity_wrapper__VwNGQ\",\"pic\":\"ClinicActivity_pic__YoVL4\",\"title\":\"ClinicActivity_title__92oeZ\",\"content\":\"ClinicActivity_content__KSYBO\"};","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetClinicQueryVariables = Types.Exact<{\n  id: Types.Scalars[\"String\"]\n}>\n\nexport type GetClinicQuery = {\n  clinic?: {\n    __typename: \"Clinic\"\n    name?: string | null\n    activities?: Array<{\n      __typename: \"ClinicActivity\"\n      id?: string | null\n      subject?: string | null\n      content?: string | null\n      createdAt: number\n      image?: string | null\n    } | null> | null\n  } | null\n}\n\nexport const GetClinicDocument = gql`\n  query GetClinic($id: String!) {\n    clinic(id: $id) {\n      name\n      activities {\n        id\n        subject\n        content\n        createdAt\n        image\n      }\n    }\n  }\n`\n\n/**\n * __useGetClinicQuery__\n *\n * To run a query within a React component, call `useGetClinicQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClinicQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClinicQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetClinicQuery(\n  baseOptions: Apollo.QueryHookOptions<GetClinicQuery, GetClinicQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetClinicQuery, GetClinicQueryVariables>(GetClinicDocument, options)\n}\nexport function useGetClinicLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetClinicQuery, GetClinicQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetClinicQuery, GetClinicQueryVariables>(GetClinicDocument, options)\n}\nexport type GetClinicQueryHookResult = ReturnType<typeof useGetClinicQuery>\nexport type GetClinicLazyQueryHookResult = ReturnType<typeof useGetClinicLazyQuery>\nexport type GetClinicQueryResult = Apollo.QueryResult<GetClinicQuery, GetClinicQueryVariables>\n","import { useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport styled from \"./ClinicActivity.module.scss\"\nimport Backdrop from \"components/Layout/Backdrop\"\nimport Header from \"components/Layout/Header\"\nimport QueryStatus from \"components/QueryStatus\"\nimport { useGetClinicLazyQuery } from \"./ClinicActivity.graphql.generated\"\n\nconst ClinicActivity = () => {\n  const { id, activityId } = useParams()\n  const [loadQuery, { data, loading, error }] = useGetClinicLazyQuery()\n\n  useEffect(() => {\n    loadQuery({\n      variables: {\n        id: id || \"\",\n      },\n    })\n  }, [loadQuery, id])\n\n  if (loading) return <QueryStatus.Loading />\n  if (error) return <QueryStatus.Error />\n\n  const activities = data?.clinic?.activities?.filter(el => el?.id === activityId)[0]\n\n  return (\n    <>\n      <Header leftArrow title={data?.clinic?.name || \"\"} />\n      <Backdrop className={styled.wrapper}>\n        <h2>診所活動</h2>\n        <img className={styled.pic} src={activities?.image || \"\"} />\n        <div className={styled.title}>{activities?.subject}</div>\n        <div\n          className={styled.content}\n          dangerouslySetInnerHTML={{ __html: activities?.content || \"\" }}\n        />\n      </Backdrop>\n    </>\n  )\n}\nexport default ClinicActivity\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"names":["style","props","className","cx","styled","children","navigate","useNavigate","text","useParams","title","leftArrow","onClick","redirect","Icon","name","defaultOptions","GetClinicDocument","gql","id","activityId","baseOptions","options","Apollo","useGetClinicLazyQuery","loadQuery","data","loading","error","useEffect","variables","QueryStatus","activities","clinic","filter","el","Header","Backdrop","src","image","subject","dangerouslySetInnerHTML","__html","content","EAGER_METHODS","useLazyQuery","query","internalState","useInternalState","useApolloClient","client","execOptionsRef","useRef","merged","current","mergeOptions","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","useMemo","key","method","create","forceUpdate","apply","this","arguments","_i","useCallback","executeOptions","fetchPolicy","promise","asyncUpdate","then","queryResult","catch"],"sourceRoot":""}