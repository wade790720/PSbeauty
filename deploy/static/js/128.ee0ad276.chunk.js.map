{"version":3,"file":"static/js/128.ee0ad276.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Layout/Backdrop/Backdrop.module.scss?d14b","components/Layout/Backdrop/index.tsx","webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/pages/Clinic/ClinicalCase/ClinicalCase.module.scss?6b6a","pages/Clinic/ClinicalCase/ClinicalCase.graphql.generated.ts","pages/Clinic/ClinicalCase/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Backdrop_wrapper__LB3Yk\"};","import styled from \"./Backdrop.module.scss\"\nimport cx from \"classnames\"\n\nexport type BackdropProps = ReactProps.Component\n\nconst Backdrop = ({ style = {}, ...props }: BackdropProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={{ ...style }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Backdrop\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ClinicalCase_wrapper__hLi9z\",\"outer\":\"ClinicalCase_outer__vIKGn\",\"title\":\"ClinicalCase_title__gZKaS\",\"collect-block\":\"ClinicalCase_collect-block__Y0MIO\",\"bookmark-fill\":\"ClinicalCase_bookmark-fill__whAkf\",\"bookmark-simple\":\"ClinicalCase_bookmark-simple__cGJ5s\",\"clinic\":\"ClinicalCase_clinic__Dlm4x\",\"content\":\"ClinicalCase_content__1SpAZ\",\"image\":\"ClinicalCase_image__-Qfka\",\"tags\":\"ClinicalCase_tags__d-N6T\"};","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetCaseQueryVariables = Types.Exact<{\n  id: Types.Scalars[\"String\"]\n}>\n\nexport type GetCaseQuery = {\n  case?: {\n    __typename: \"ClinicCase\"\n    id?: string | null\n    title?: string | null\n    description?: string | null\n    image?: string | null\n    categories?: Array<{\n      __typename: \"Category\"\n      id?: string | null\n      name?: string | null\n    } | null> | null\n    clinic?: { __typename: \"Clinic\"; id?: string | null; name?: string | null } | null\n  } | null\n}\n\nexport type GetCollectItemsQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetCollectItemsQuery = {\n  me?: {\n    __typename: \"User\"\n    userCollectedCases?: Array<{ __typename: \"ClinicCase\"; id?: string | null } | null> | null\n  } | null\n}\n\nexport type CollectCaseMutationVariables = Types.Exact<{\n  caseId: Types.Scalars[\"String\"]\n}>\n\nexport type CollectCaseMutation = {\n  collectCase?: {\n    __typename: \"CollectCasePayload\"\n    userId?: string | null\n    collectedCount: number\n  } | null\n}\n\nexport type RemoveCollectedCaseMutationVariables = Types.Exact<{\n  caseId: Types.Scalars[\"String\"]\n}>\n\nexport type RemoveCollectedCaseMutation = {\n  removeCollectedCase?: {\n    __typename: \"RemoveCollectedCasePayload\"\n    userId?: string | null\n    collectedCount: number\n  } | null\n}\n\nexport const GetCaseDocument = gql`\n  query GetCase($id: String!) {\n    case(id: $id) {\n      id\n      title\n      description\n      image\n      categories {\n        id\n        name\n      }\n      clinic {\n        id\n        name\n      }\n    }\n  }\n`\n\n/**\n * __useGetCaseQuery__\n *\n * To run a query within a React component, call `useGetCaseQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCaseQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCaseQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetCaseQuery(\n  baseOptions: Apollo.QueryHookOptions<GetCaseQuery, GetCaseQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetCaseQuery, GetCaseQueryVariables>(GetCaseDocument, options)\n}\nexport function useGetCaseLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetCaseQuery, GetCaseQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetCaseQuery, GetCaseQueryVariables>(GetCaseDocument, options)\n}\nexport type GetCaseQueryHookResult = ReturnType<typeof useGetCaseQuery>\nexport type GetCaseLazyQueryHookResult = ReturnType<typeof useGetCaseLazyQuery>\nexport type GetCaseQueryResult = Apollo.QueryResult<GetCaseQuery, GetCaseQueryVariables>\nexport const GetCollectItemsDocument = gql`\n  query GetCollectItems {\n    me {\n      userCollectedCases {\n        id\n      }\n    }\n  }\n`\n\n/**\n * __useGetCollectItemsQuery__\n *\n * To run a query within a React component, call `useGetCollectItemsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCollectItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCollectItemsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCollectItemsQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetCollectItemsQuery, GetCollectItemsQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetCollectItemsQuery, GetCollectItemsQueryVariables>(\n    GetCollectItemsDocument,\n    options,\n  )\n}\nexport function useGetCollectItemsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetCollectItemsQuery, GetCollectItemsQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetCollectItemsQuery, GetCollectItemsQueryVariables>(\n    GetCollectItemsDocument,\n    options,\n  )\n}\nexport type GetCollectItemsQueryHookResult = ReturnType<typeof useGetCollectItemsQuery>\nexport type GetCollectItemsLazyQueryHookResult = ReturnType<typeof useGetCollectItemsLazyQuery>\nexport type GetCollectItemsQueryResult = Apollo.QueryResult<\n  GetCollectItemsQuery,\n  GetCollectItemsQueryVariables\n>\nexport const CollectCaseDocument = gql`\n  mutation CollectCase($caseId: String!) {\n    collectCase(input: { caseId: $caseId }) {\n      userId\n      collectedCount\n    }\n  }\n`\nexport type CollectCaseMutationFn = Apollo.MutationFunction<\n  CollectCaseMutation,\n  CollectCaseMutationVariables\n>\n\n/**\n * __useCollectCaseMutation__\n *\n * To run a mutation, you first call `useCollectCaseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCollectCaseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [collectCaseMutation, { data, loading, error }] = useCollectCaseMutation({\n *   variables: {\n *      caseId: // value for 'caseId'\n *   },\n * });\n */\nexport function useCollectCaseMutation(\n  baseOptions?: Apollo.MutationHookOptions<CollectCaseMutation, CollectCaseMutationVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<CollectCaseMutation, CollectCaseMutationVariables>(\n    CollectCaseDocument,\n    options,\n  )\n}\nexport type CollectCaseMutationHookResult = ReturnType<typeof useCollectCaseMutation>\nexport type CollectCaseMutationResult = Apollo.MutationResult<CollectCaseMutation>\nexport type CollectCaseMutationOptions = Apollo.BaseMutationOptions<\n  CollectCaseMutation,\n  CollectCaseMutationVariables\n>\nexport const RemoveCollectedCaseDocument = gql`\n  mutation RemoveCollectedCase($caseId: String!) {\n    removeCollectedCase(input: { caseId: $caseId }) {\n      userId\n      collectedCount\n    }\n  }\n`\nexport type RemoveCollectedCaseMutationFn = Apollo.MutationFunction<\n  RemoveCollectedCaseMutation,\n  RemoveCollectedCaseMutationVariables\n>\n\n/**\n * __useRemoveCollectedCaseMutation__\n *\n * To run a mutation, you first call `useRemoveCollectedCaseMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveCollectedCaseMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeCollectedCaseMutation, { data, loading, error }] = useRemoveCollectedCaseMutation({\n *   variables: {\n *      caseId: // value for 'caseId'\n *   },\n * });\n */\nexport function useRemoveCollectedCaseMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RemoveCollectedCaseMutation,\n    RemoveCollectedCaseMutationVariables\n  >,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<RemoveCollectedCaseMutation, RemoveCollectedCaseMutationVariables>(\n    RemoveCollectedCaseDocument,\n    options,\n  )\n}\nexport type RemoveCollectedCaseMutationHookResult = ReturnType<\n  typeof useRemoveCollectedCaseMutation\n>\nexport type RemoveCollectedCaseMutationResult = Apollo.MutationResult<RemoveCollectedCaseMutation>\nexport type RemoveCollectedCaseMutationOptions = Apollo.BaseMutationOptions<\n  RemoveCollectedCaseMutation,\n  RemoveCollectedCaseMutationVariables\n>\n","import styled from \"./ClinicalCase.module.scss\"\nimport Backdrop from \"components/Layout/Backdrop\"\nimport Header from \"components/Layout/Header\"\nimport Icon from \"components/Icon\"\nimport {\n  useGetCaseQuery,\n  useGetCollectItemsLazyQuery,\n  useCollectCaseMutation,\n  useRemoveCollectedCaseMutation,\n} from \"./ClinicalCase.graphql.generated\"\nimport { useEffect, useState, useLayoutEffect, useRef } from \"react\"\nimport useGo from \"components/Router/useGo\"\nimport { useAuth } from \"hooks/useAuth\"\nimport { useParams } from \"react-router-dom\"\nimport QueryStatus from \"components/QueryStatus\"\n\nconst ClinicalCase = () => {\n  const go = useGo()\n  const auth = useAuth()\n  const imageRef = useRef<HTMLDivElement>(null)\n  const [imageWidth, setImageWidth] = useState(0)\n  const { caseId } = useParams()\n  const [loadGetCollectItemsQuery, getCollectItemsQuery] = useGetCollectItemsLazyQuery({\n    fetchPolicy: \"no-cache\",\n  })\n  const { data, loading, error } = useGetCaseQuery({\n    variables: {\n      id: caseId || \"\",\n    },\n  })\n\n  const [isCollected, setIsCollected] = useState(false)\n\n  useLayoutEffect(() => {\n    if (imageRef.current && !loading) {\n      setImageWidth(imageRef.current.clientWidth)\n    }\n  }, [loading])\n\n  useEffect(() => {\n    if (auth.user.id) loadGetCollectItemsQuery()\n  }, [auth.user.id])\n\n  useEffect(() => {\n    setIsCollected(\n      !!getCollectItemsQuery?.data?.me?.userCollectedCases?.find(el => el?.id === caseId),\n    )\n  }, [getCollectItemsQuery?.data?.me?.userCollectedCases])\n\n  const [collectCaseMutation] = useCollectCaseMutation({\n    variables: {\n      caseId: caseId || \"\",\n    },\n    update(_, mutationResult) {\n      if (mutationResult?.data?.collectCase?.userId) setIsCollected(true)\n    },\n  })\n\n  const [removeCollectedCaseMutation] = useRemoveCollectedCaseMutation({\n    variables: {\n      caseId: caseId || \"\",\n    },\n    update(_, mutationResult) {\n      if (mutationResult?.data?.removeCollectedCase) setIsCollected(false)\n    },\n  })\n\n  if (loading) return <QueryStatus.Loading />\n  if (error) return <QueryStatus.Error />\n\n  return (\n    <>\n      <Header leftArrow />\n      <Backdrop className={styled.wrapper}>\n        <div className={styled.outer}>\n          <div className={styled.title}>{data?.case?.title}</div>\n          <div\n            className={styled.clinic}\n            onClick={() => go.toClinicInner({ id: data?.case?.clinic?.id || \"\", tab: \"info\" })}>\n            {data?.case?.clinic?.name}\n          </div>\n          <div className={styled.image} style={{ height: imageWidth }} ref={imageRef}>\n            <img src={data?.case?.image || \"\"} />\n          </div>\n          <div\n            className={styled.content}\n            dangerouslySetInnerHTML={{ __html: data?.case?.description || \"\" }}\n          />\n          <div className={styled.tags}>\n            {data?.case?.categories?.map(el => (\n              <div key={el?.id}>\n                <span>#</span>\n                {el?.name}\n              </div>\n            ))}\n          </div>\n          <div\n            className={styled[\"collect-block\"]}\n            onClick={e => {\n              e.stopPropagation()\n              if (!auth.user.id) return go.toSignIn()\n              isCollected ? removeCollectedCaseMutation() : collectCaseMutation()\n            }}>\n            <Icon\n              name={isCollected ? \"BookmarkFill\" : \"BookmarkSimple\"}\n              className={styled[\"bookmark-simple\"]}\n            />\n          </div>\n        </div>\n      </Backdrop>\n    </>\n  )\n}\nexport default ClinicalCase\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      ref.current.options?.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["style","props","className","cx","styled","children","navigate","useNavigate","text","useParams","title","leftArrow","onClick","redirect","Icon","name","defaultOptions","GetCaseDocument","gql","GetCollectItemsDocument","CollectCaseDocument","RemoveCollectedCaseDocument","go","useGo","auth","useAuth","imageRef","useRef","useState","imageWidth","setImageWidth","caseId","baseOptions","options","Apollo","useGetCollectItemsLazyQuery","fetchPolicy","loadGetCollectItemsQuery","getCollectItemsQuery","useGetCaseQuery","variables","id","data","loading","error","isCollected","setIsCollected","useLayoutEffect","current","clientWidth","useEffect","user","me","userCollectedCases","find","el","useCollectCaseMutation","update","_","mutationResult","collectCase","userId","collectCaseMutation","useRemoveCollectedCaseMutation","removeCollectedCase","removeCollectedCaseMutation","QueryStatus","Header","Backdrop","case","toClinicInner","clinic","tab","height","ref","src","image","dangerouslySetInnerHTML","__html","description","categories","map","e","stopPropagation","toSignIn","EAGER_METHODS","useLazyQuery","query","internalState","useInternalState","useApolloClient","client","execOptionsRef","merged","mergeOptions","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","useMemo","key","method","create","forceUpdate","apply","this","arguments","_i","useCallback","executeOptions","promise","asyncUpdate","then","queryResult","catch","useMutation","mutation","verifyDocumentType","DocumentType","setResult","mutationId","isMounted","execute","ignoreResults","clientOptions","mutate","response","errors","length","ApolloError","graphQLErrors","result_1","equal","_a","onCompleted","_b","_c","result_2","onError","_d","reset"],"sourceRoot":""}