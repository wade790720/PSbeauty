{"version":3,"file":"static/js/760.61852737.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Layout/Backdrop/Backdrop.module.scss?d14b","components/Layout/Backdrop/index.tsx","webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/containers/HistoryRecordCard/HistoryRecordCard.module.scss?be44","containers/HistoryRecordCard/index.tsx","pages/Chatroom/Chatroom.graphql.generated.ts","webpack://psbeauty/./src/pages/Chatroom/Chatroom.module.scss?b1fd","pages/Chatroom/UploadImage.svg","pages/Chatroom/useRealtime.ts","pages/Chatroom/index.tsx","utils/uuid.ts","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Backdrop_wrapper__LB3Yk\"};","import styled from \"./Backdrop.module.scss\"\nimport cx from \"classnames\"\n\nexport type BackdropProps = ReactProps.Component\n\nconst Backdrop = ({ style = {}, ...props }: BackdropProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={{ ...style }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Backdrop\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"HistoryRecordCard_wrapper__YdfQX\",\"title\":\"HistoryRecordCard_title__kZ9xc\",\"date\":\"HistoryRecordCard_date__a43-L\",\"images\":\"HistoryRecordCard_images__07MUh\",\"content\":\"HistoryRecordCard_content__vGvkA\",\"open\":\"HistoryRecordCard_open__kAqbY\",\"more\":\"HistoryRecordCard_more__PtkOB\",\"tags\":\"HistoryRecordCard_tags__ZwCeD\",\"toggle\":\"HistoryRecordCard_toggle__7H1vm\"};","import { useState, useRef, useLayoutEffect, useEffect } from \"react\"\nimport styled from \"./HistoryRecordCard.module.scss\"\nimport cx from \"classnames\"\nimport Switch from \"react-switch\"\n\nexport type HistoryRecordCardProps = {\n  id: string\n  title: string\n  date: string\n  toggle?: boolean\n  images: string[]\n  introduction: string\n  tags?: string[]\n  onChange?: ({ id, enable }: { id: string; enable: boolean }) => void\n} & ReactProps.Component\n\nconst HistoryRecordCard = ({ ...props }: HistoryRecordCardProps) => {\n  const [over, setOver] = useState<boolean>(false)\n  const [open, setOpen] = useState<boolean>(false)\n  const [toggle, setToggle] = useState<boolean>()\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    setToggle(props.toggle)\n  }, [props.toggle])\n\n  useLayoutEffect(() => {\n    const clientHeight = ref.current?.clientHeight || 0\n    const scrollHeight = ref.current?.scrollHeight || 0\n    if (clientHeight && scrollHeight > clientHeight) {\n      setOver(true)\n    }\n  }, [])\n\n  return (\n    <div className={styled.wrapper}>\n      <div className={styled.title}>{props.title}</div>\n      <div className={styled.date}>{props.date}</div>\n      {props.images.length > 0 && (\n        <div className={styled.images}>\n          {props.images.map((image, idx) => (\n            <img key={`img-${idx}`} src={image} />\n          ))}\n        </div>\n      )}\n      <div className={cx(styled.content, open && styled.open)} ref={ref}>\n        {props.introduction}\n      </div>\n      {over && !open && (\n        <span className={styled.more} onClick={() => setOpen(true)}>\n          顯示更多\n        </span>\n      )}\n      <div className={styled.tags}>\n        {props.tags?.map((tag, idx) => (\n          <div key={`tag-${idx}`}>\n            <span>#</span>\n            {tag}\n          </div>\n        ))}\n      </div>\n      {typeof props.toggle === \"boolean\" && (\n        <div className={styled.toggle}>\n          <Switch\n            checkedIcon={false}\n            uncheckedIcon={false}\n            width={51}\n            height={31}\n            onColor=\"#7873E5\"\n            offColor=\"#CBCBCD\"\n            activeBoxShadow=\"0 0 2px 3px #7873E533\"\n            checked={toggle || false}\n            onChange={() => {\n              if (props.onChange) {\n                setToggle(!toggle)\n                props.onChange({ id: props.id, enable: !props.toggle })\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default HistoryRecordCard\n","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GeTopicDetailQueryVariables = Types.Exact<{\n  input?: Types.InputMaybe<Types.Scalars[\"String\"]>\n}>\n\nexport type GeTopicDetailQuery = {\n  topic?: {\n    __typename: \"ClinicConsultTopic\"\n    clinic?: {\n      __typename: \"Clinic\"\n      id?: string | null\n      name?: string | null\n      paid: boolean\n      owners?: Array<{ __typename: \"User\"; id?: string | null } | null> | null\n    } | null\n    consult?: {\n      __typename: \"Consult\"\n      id?: string | null\n      consultAt: number\n      days: number\n      subject?: string | null\n      images?: Array<string | null> | null\n      content?: string | null\n      oneOnOne: boolean\n      poster?: { __typename: \"User\"; id?: string | null } | null\n      categories?: Array<{\n        __typename: \"Category\"\n        id?: string | null\n        name?: string | null\n      } | null> | null\n    } | null\n    replies?: Array<{\n      __typename: \"ConsultTopicReply\"\n      id?: string | null\n      content?: string | null\n      contentType?: string | null\n      readAt: number\n      userId?: string | null\n    } | null> | null\n  } | null\n}\n\nexport type ReplyTopicMutationVariables = Types.Exact<{\n  input?: Types.InputMaybe<Types.ReplyTopicInput>\n}>\n\nexport type ReplyTopicMutation = {\n  replyTopic?: { __typename: \"ReplyTopicPayload\"; id?: string | null } | null\n}\n\nexport type ReadReplyMutationVariables = Types.Exact<{\n  input?: Types.InputMaybe<Types.ReadReplyInput>\n}>\n\nexport type ReadReplyMutation = {\n  readReply?: { __typename: \"ReadReplyPayload\"; replyId?: Array<string | null> | null } | null\n}\n\nexport const GeTopicDetailDocument = gql`\n  query GeTopicDetail($input: String) {\n    topic(topicId: $input) {\n      clinic {\n        id\n        name\n        paid\n        owners {\n          id\n        }\n      }\n      consult {\n        id\n        consultAt\n        days\n        subject\n        images\n        consultAt\n        content\n        oneOnOne\n        poster {\n          id\n        }\n        categories {\n          id\n          name\n        }\n      }\n      replies {\n        id\n        content\n        contentType\n        readAt\n        userId\n      }\n    }\n  }\n`\n\n/**\n * __useGeTopicDetailQuery__\n *\n * To run a query within a React component, call `useGeTopicDetailQuery` and pass it any options that fit your needs.\n * When your component renders, `useGeTopicDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGeTopicDetailQuery({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useGeTopicDetailQuery(\n  baseOptions?: Apollo.QueryHookOptions<GeTopicDetailQuery, GeTopicDetailQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GeTopicDetailQuery, GeTopicDetailQueryVariables>(\n    GeTopicDetailDocument,\n    options,\n  )\n}\nexport function useGeTopicDetailLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GeTopicDetailQuery, GeTopicDetailQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GeTopicDetailQuery, GeTopicDetailQueryVariables>(\n    GeTopicDetailDocument,\n    options,\n  )\n}\nexport type GeTopicDetailQueryHookResult = ReturnType<typeof useGeTopicDetailQuery>\nexport type GeTopicDetailLazyQueryHookResult = ReturnType<typeof useGeTopicDetailLazyQuery>\nexport type GeTopicDetailQueryResult = Apollo.QueryResult<\n  GeTopicDetailQuery,\n  GeTopicDetailQueryVariables\n>\nexport const ReplyTopicDocument = gql`\n  mutation replyTopic($input: ReplyTopicInput) {\n    replyTopic(input: $input) {\n      id\n    }\n  }\n`\nexport type ReplyTopicMutationFn = Apollo.MutationFunction<\n  ReplyTopicMutation,\n  ReplyTopicMutationVariables\n>\n\n/**\n * __useReplyTopicMutation__\n *\n * To run a mutation, you first call `useReplyTopicMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReplyTopicMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [replyTopicMutation, { data, loading, error }] = useReplyTopicMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useReplyTopicMutation(\n  baseOptions?: Apollo.MutationHookOptions<ReplyTopicMutation, ReplyTopicMutationVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<ReplyTopicMutation, ReplyTopicMutationVariables>(\n    ReplyTopicDocument,\n    options,\n  )\n}\nexport type ReplyTopicMutationHookResult = ReturnType<typeof useReplyTopicMutation>\nexport type ReplyTopicMutationResult = Apollo.MutationResult<ReplyTopicMutation>\nexport type ReplyTopicMutationOptions = Apollo.BaseMutationOptions<\n  ReplyTopicMutation,\n  ReplyTopicMutationVariables\n>\nexport const ReadReplyDocument = gql`\n  mutation readReply($input: ReadReplyInput) {\n    readReply(input: $input) {\n      replyId\n    }\n  }\n`\nexport type ReadReplyMutationFn = Apollo.MutationFunction<\n  ReadReplyMutation,\n  ReadReplyMutationVariables\n>\n\n/**\n * __useReadReplyMutation__\n *\n * To run a mutation, you first call `useReadReplyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReadReplyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [readReplyMutation, { data, loading, error }] = useReadReplyMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useReadReplyMutation(\n  baseOptions?: Apollo.MutationHookOptions<ReadReplyMutation, ReadReplyMutationVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<ReadReplyMutation, ReadReplyMutationVariables>(\n    ReadReplyDocument,\n    options,\n  )\n}\nexport type ReadReplyMutationHookResult = ReturnType<typeof useReadReplyMutation>\nexport type ReadReplyMutationResult = Apollo.MutationResult<ReadReplyMutation>\nexport type ReadReplyMutationOptions = Apollo.BaseMutationOptions<\n  ReadReplyMutation,\n  ReadReplyMutationVariables\n>\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Chatroom_wrapper__WRyWi\",\"row\":\"Chatroom_row__lnyku\",\"left\":\"Chatroom_left__bYw84\",\"avatar\":\"Chatroom_avatar__A97b5\",\"user-avatar\":\"Chatroom_user-avatar__m3BYD\",\"message\":\"Chatroom_message__ADK3W\",\"right\":\"Chatroom_right__h-RGC\",\"center\":\"Chatroom_center__EBdCa\",\"time\":\"Chatroom_time__fYGdV\",\"image\":\"Chatroom_image__tO+75\",\"input\":\"Chatroom_input__V9jzc\",\"control\":\"Chatroom_control__f1Yvc\",\"submit\":\"Chatroom_submit__1ExW0\"};","var _path, _path2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgUploadImage(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 14,\n    viewBox: \"0 0 16 14\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.00195 4.5C6.00195 4.89782 5.84392 5.27936 5.56261 5.56066C5.28131 5.84196 4.89978 6 4.50195 6C4.10413 6 3.7226 5.84196 3.44129 5.56066C3.15999 5.27936 3.00195 4.89782 3.00195 4.5C3.00195 4.10218 3.15999 3.72064 3.44129 3.43934C3.7226 3.15804 4.10413 3 4.50195 3C4.89978 3 5.28131 3.15804 5.56261 3.43934C5.84392 3.72064 6.00195 4.10218 6.00195 4.5Z\",\n    fill: \"#AAB0B2\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2.00195 0C1.47152 0 0.962812 0.210714 0.58774 0.585786C0.212667 0.960859 0.00195313 1.46957 0.00195312 2V12C0.00195313 12.5304 0.212667 13.0391 0.58774 13.4142C0.962812 13.7893 1.47152 14 2.00195 14H14.002C14.5324 14 15.0411 13.7893 15.4162 13.4142C15.7912 13.0391 16.002 12.5304 16.002 12V2C16.002 1.46957 15.7912 0.960859 15.4162 0.585786C15.0411 0.210714 14.5324 0 14.002 0H2.00195ZM14.002 1C14.2672 1 14.5215 1.10536 14.7091 1.29289C14.8966 1.48043 15.002 1.73478 15.002 2V8.5L11.225 6.553C11.1312 6.50602 11.025 6.48973 10.9215 6.50642C10.8179 6.52311 10.7222 6.57194 10.648 6.646L6.93795 10.356L4.27795 8.584C4.18191 8.52006 4.06672 8.4913 3.95189 8.5026C3.83707 8.5139 3.72969 8.56456 3.64795 8.646L1.00195 11V2C1.00195 1.73478 1.10731 1.48043 1.29485 1.29289C1.48238 1.10536 1.73674 1 2.00195 1H14.002Z\",\n    fill: \"#AAB0B2\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgUploadImage);\nexport default __webpack_public_path__ + \"static/media/UploadImage.969c6b4b6d74e4a83e6dbdbd11759872.svg\";\nexport { ForwardRef as ReactComponent };","import { doc, onSnapshot, serverTimestamp, setDoc, Timestamp } from \"firebase/firestore\"\nimport { useEffect, useMemo, useRef } from \"react\"\nimport { ConsultTopicReply } from \"types/schema\"\nimport { firestore } from \"../../firebaseClient\"\n\ntype RealTimeMessage = Pick<ConsultTopicReply, \"content\" | \"userId\" | \"contentType\"> & {\n  timestamp: Timestamp | ReturnType<typeof serverTimestamp>\n  timestampMillis?: number\n}\n\ntype useRealtimeProps = {\n  chatroomId: string\n  onMessage: (msg: RealTimeMessage) => void\n}\n\nconst useRealtime = ({ chatroomId, onMessage }: useRealtimeProps) => {\n  if (!chatroomId) {\n    throw new Error(\"必需要提供 chatroomId。\")\n  }\n\n  const connected = useRef<boolean>(false)\n  const chatroomRef = useMemo(() => {\n    return doc(firestore, \"chatroom\", chatroomId)\n  }, [chatroomId])\n\n  useEffect(() => {\n    return onSnapshot(chatroomRef, doc => {\n      if (doc.exists()) {\n        const msg = doc.data() as RealTimeMessage\n\n        if (connected.current) {\n          if (!msg.timestamp) {\n            return\n          }\n\n          const { seconds, nanoseconds } = msg.timestamp as Timestamp\n          onMessage({ ...msg, timestampMillis: new Timestamp(seconds, nanoseconds).toMillis() })\n        } else {\n          connected.current = true\n        }\n      } else {\n        connected.current = true\n      }\n    })\n  }, [chatroomId])\n\n  return async (\n    msg: Pick<RealTimeMessage, \"content\" | \"userId\" | \"contentType\"> & { consultedId?: string },\n  ) => {\n    if (msg.consultedId) {\n      const inboxRef = doc(firestore, \"inbox\", msg.consultedId)\n      await setDoc(inboxRef, {\n        content: msg.content,\n        timestamp: serverTimestamp(),\n      })\n    }\n    return setDoc(chatroomRef, {\n      content: msg.content,\n      userId: msg.userId,\n      timestamp: serverTimestamp(),\n      contentType: msg.contentType,\n    } as RealTimeMessage)\n  }\n}\n\nexport default useRealtime\n","import cx from \"classnames\"\nimport HistoryRecordCard from \"containers/HistoryRecordCard\"\nimport Backdrop from \"components/Layout/Backdrop\"\nimport Header from \"components/Layout/Header\"\nimport dayjs from \"dayjs\"\nimport { useAuth } from \"hooks/useAuth\"\nimport { useEffect, useRef, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport {\n  useGeTopicDetailQuery,\n  useReadReplyMutation,\n  useReplyTopicMutation,\n} from \"./Chatroom.graphql.generated\"\nimport styled from \"./Chatroom.module.scss\"\nimport { ReactComponent as UploadImage } from \"./UploadImage.svg\"\nimport useRealtime from \"./useRealtime\"\nimport QueryStatus from \"components/QueryStatus\"\nimport uuid from \"utils/uuid\"\nimport { storage } from \"firebaseClient\"\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\"\n\ninterface MessageRow {\n  content: string\n  userId: string\n  key: string\n  contentType: string\n}\n\nconst f = (dayjs: dayjs.Dayjs) => {\n  return dayjs.format(\"YYYY-MM-DD\")\n}\n\nconst Chatroom = () => {\n  const { id } = useParams()\n  const auth = useAuth()\n  const msgInputRef = useRef<HTMLInputElement>(null)\n  const [message, setMessage] = useState(\"\")\n  const [realtimes, setRealtimes] = useState<MessageRow[]>([])\n  const realtimesRef = useRef<MessageRow[]>()\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const imageRef = useRef<HTMLInputElement>(null)\n\n  const topicDetail = useGeTopicDetailQuery({\n    variables: {\n      input: id || \"\",\n    },\n    fetchPolicy: \"no-cache\",\n  })\n\n  const [replyTopicMutation] = useReplyTopicMutation()\n\n  const [readReply] = useReadReplyMutation()\n  realtimesRef.current = realtimes\n  const notify = useRealtime({\n    chatroomId: id || \"\",\n    onMessage: msg => {\n      const rt = realtimesRef.current || []\n      const newRt = [\n        ...rt,\n        {\n          content: msg.content || \"\",\n          key: msg.timestampMillis + \"\",\n          userId: msg.userId || \"\",\n          contentType: msg.contentType || \"\",\n        },\n      ]\n      setRealtimes(newRt)\n      readReply({\n        variables: {\n          input: {\n            topicId: id || \"\",\n          },\n        },\n      })\n      scrollToBottom()\n    },\n  })\n\n  useEffect(() => {\n    readReply({\n      variables: {\n        input: {\n          topicId: id || \"\",\n        },\n      },\n    })\n  }, [])\n\n  const scrollToBottom = () => {\n    setTimeout(() => {\n      messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    }, 100)\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [topicDetail.loading])\n\n  if (topicDetail.loading) return <QueryStatus.Loading />\n  if (topicDetail.error) return <QueryStatus.Error />\n\n  const newMessage = (msg: string, consulteeId?: string) => {\n    if (!msg) {\n      return\n    }\n\n    replyTopicMutation({\n      variables: {\n        input: {\n          topicId: id || \"\",\n          content: msg,\n          contentType: \"text\",\n        },\n      },\n      async onCompleted() {\n        await notify({\n          content: msg,\n          userId: auth.user.id,\n          contentType: \"text\",\n          consultedId: consulteeId,\n        })\n        setMessage(\"\")\n        msgInputRef.current?.focus()\n      },\n    })\n  }\n\n  const clinic = topicDetail.data?.topic?.clinic\n  const consult = topicDetail.data?.topic?.consult\n  const replies = topicDetail.data?.topic?.replies || []\n\n  const messages: MessageRow[] = replies.map(r => ({\n    content: r?.content || \"\",\n    key: r?.id || \"\",\n    userId: r?.userId || \"\",\n    contentType: r?.contentType || \"\",\n  }))\n\n  const consultAt = dayjs((consult?.consultAt || 0) * 1000)\n  const endDay = consultAt.add(consult?.days || 0, \"day\")\n  const today = dayjs()\n  const timeleft = endDay.diff(today, \"day\")\n  const oneOnOne = consult?.oneOnOne\n  const images = (consult?.images || []).map(v => v || \"\")\n  const categories = (consult?.categories || []).map(v => v?.name || \"\")\n  const isClinic = !!auth.user.clinic\n\n  messages.push(...realtimes)\n\n  let consulteeId = messages.find(msg => msg.userId != auth.user.id)?.userId\n\n  // 在啟始始一對一時，應該都是會員啟動，所以直接通知診所 inbox。\n  if (oneOnOne && !consulteeId) {\n    consulteeId = clinic?.owners?.[0]?.id || undefined\n  }\n\n  return (\n    <>\n      <Header leftArrow title={clinic?.name || \"\"} />\n      <Backdrop className={styled.wrapper}>\n        {/* <div className={cx(styled.row, styled.center)}></div> */}\n        {isClinic\n          ? null\n          : !clinic?.paid && (\n              <div className={cx(styled.row, styled.center)}>\n                (診所非付費會員，可能無法回覆訊息)\n              </div>\n            )}\n        {!oneOnOne && (\n          <div className={cx(styled.row, styled.center)}>\n            <HistoryRecordCard\n              id={consult?.id || \"\"}\n              title={consult?.subject || \"\"}\n              date={`起始日 ${f(consultAt)}｜到期日 ${f(endDay)}${\n                timeleft > 0 ? `(剩餘${timeleft}天)` : `(已過期)`\n              }`}\n              images={images}\n              introduction={consult?.content || \"\"}\n              tags={categories}\n            />\n          </div>\n        )}\n        {messages.map(v => {\n          if (v?.userId == auth.user.id) {\n            return (\n              <div className={cx(styled.row, styled.right)} key={v?.key}>\n                {v?.contentType === \"text\" && <div className={styled.message}>{v?.content}</div>}\n                {v?.contentType === \"image\" && <img className={styled.image} src={v?.content} />}\n              </div>\n            )\n          } else {\n            return (\n              <div className={cx(styled.row, styled.left)} key={v?.key}>\n                {auth.user.clinic ? (\n                  <div className={styled[\"user-avatar\"]}>U</div>\n                ) : (\n                  <img className={styled.avatar} src=\"/img/chatroom-user.png\" />\n                )}\n                {v?.contentType === \"text\" && <div className={styled.message}>{v?.content}</div>}\n                {v?.contentType === \"image\" && <img className={styled.image} src={v?.content} />}\n              </div>\n            )\n          }\n        })}\n        <div ref={messagesEndRef}></div>\n      </Backdrop>\n      {timeleft > 0 && (\n        <div className={styled.input}>\n          <div className={styled.control}>\n            <UploadImage\n              onClick={() => {\n                imageRef.current?.click()\n              }}\n            />\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              style={{ display: \"none\" }}\n              ref={imageRef}\n              onChange={e => {\n                const file = e.target?.files?.[0]\n                if (file) {\n                  const storageRef = ref(storage, `image/${uuid()}/${file?.name || \"\"}`)\n                  uploadBytes(storageRef, file)\n                    .then(snapshot => getDownloadURL(snapshot.ref))\n                    .then(image => {\n                      replyTopicMutation({\n                        variables: {\n                          input: {\n                            topicId: id || \"\",\n                            content: image,\n                            contentType: \"image\",\n                          },\n                        },\n                        async onCompleted() {\n                          await notify({\n                            content: image,\n                            userId: auth.user.id,\n                            contentType: \"image\",\n                            consultedId: consulteeId,\n                          })\n                          if (imageRef.current) {\n                            imageRef.current.value = \"\"\n                          }\n                          msgInputRef.current?.focus()\n                        },\n                      })\n                    })\n                }\n              }}\n            />\n            {isClinic ? (\n              <>\n                <input\n                  ref={msgInputRef}\n                  value={message}\n                  disabled={!clinic?.paid}\n                  placeholder={clinic?.paid ? \"\" : \"付費會員即可回覆訊息\"}\n                  onChange={e => setMessage(e.target.value)}></input>\n                {clinic?.paid ? (\n                  <div className={styled.submit} onClick={() => newMessage(message, consulteeId)}>\n                    送出\n                  </div>\n                ) : null}\n              </>\n            ) : (\n              <>\n                <input\n                  ref={msgInputRef}\n                  value={message}\n                  onChange={e => setMessage(e.target.value)}></input>\n                <div className={styled.submit} onClick={() => newMessage(message, consulteeId)}>\n                  送出\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\nexport default Chatroom\n","import { nanoid } from \"nanoid\"\n\nexport default nanoid\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["style","props","className","cx","styled","children","navigate","useNavigate","text","useParams","title","leftArrow","onClick","redirect","Icon","name","useState","over","setOver","open","setOpen","toggle","setToggle","ref","useRef","useEffect","useLayoutEffect","clientHeight","current","scrollHeight","date","images","length","map","image","idx","src","introduction","tags","tag","checkedIcon","uncheckedIcon","width","height","onColor","offColor","activeBoxShadow","checked","onChange","id","enable","defaultOptions","GeTopicDetailDocument","gql","ReplyTopicDocument","ReadReplyDocument","_path","_path2","_excluded","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgUploadImage","_ref","svgRef","titleId","viewBox","fill","xmlns","d","ForwardRef","chatroomId","onMessage","Error","connected","chatroomRef","useMemo","doc","firestore","onSnapshot","exists","msg","data","timestamp","seconds","nanoseconds","timestampMillis","Timestamp","toMillis","consultedId","inboxRef","setDoc","content","serverTimestamp","userId","contentType","f","dayjs","format","auth","useAuth","msgInputRef","message","setMessage","realtimes","setRealtimes","realtimesRef","messagesEndRef","imageRef","topicDetail","baseOptions","options","Apollo","useGeTopicDetailQuery","variables","input","fetchPolicy","useReplyTopicMutation","replyTopicMutation","useReadReplyMutation","readReply","notify","useRealtime","rt","newRt","topicId","scrollToBottom","setTimeout","scrollIntoView","behavior","loading","QueryStatus","error","newMessage","consulteeId","onCompleted","user","focus","clinic","topic","consult","messages","replies","r","consultAt","endDay","add","days","today","timeleft","diff","oneOnOne","v","categories","isClinic","push","find","owners","undefined","Header","Backdrop","paid","HistoryRecordCard","subject","click","type","accept","display","e","file","files","storageRef","storage","uuid","uploadBytes","then","snapshot","getDownloadURL","value","disabled","placeholder","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}