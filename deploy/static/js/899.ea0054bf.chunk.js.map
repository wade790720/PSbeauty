{"version":3,"file":"static/js/899.ea0054bf.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Button/Button.module.scss?197e","components/Button/index.tsx","components/Modal/ModalPopup/index.tsx","webpack://psbeauty/./src/components/Modal/ModalDialog/ModalDialog.module.scss?9216","components/Modal/ModalDialog/index.tsx","webpack://psbeauty/./src/components/Modal/ModalHeader/ModalHeader.module.scss?68a2","components/Modal/ModalHeader/index.tsx","webpack://psbeauty/./src/components/Modal/ModalBody/ModalBody.module.scss?5b3c","components/Modal/ModalBody/index.tsx","webpack://psbeauty/./src/components/Modal/ModalFooter/ModalFooter.module.scss?a978","components/Modal/ModalFooter/index.tsx","components/Modal/Modal/index.tsx","components/Modal/withOpen.tsx","components/Modal/index.tsx","webpack://psbeauty/./src/containers/Profile/Profile.module.scss?24d0","containers/Profile/index.tsx","pages/Member/MemberInbox/MemberInbox.graphql.generated.ts","webpack://psbeauty/./src/pages/Member/Member.module.scss?bb26","pages/Member/index.tsx","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Button_wrapper__GqKsN\",\"primary\":\"Button_primary__9MLUH\",\"secondary\":\"Button_secondary__sUGsj\",\"selected\":\"Button_selected__NZP20\",\"text\":\"Button_text__Rk+Tr\",\"transparent\":\"Button_transparent__puDsp\"};","import React, { PropsWithChildren } from \"react\"\nimport cx from \"classnames\"\nimport styled from \"./Button.module.scss\"\n\nconst VARIANT = {\n  PRIMARY: \"primary\",\n  SECONDARY: \"secondary\",\n  TEXT: \"text\",\n  TRANSPARENT: \"transparent\",\n} as const\n\nexport type ButtonProps = {\n  /**\n   * Specify the type of the\n   */\n  variant?: typeof VARIANT[keyof typeof VARIANT]\n  /**\n   * Specify whether the Button is currently selected\n   */\n  selected?: boolean\n  /**\n   * The button's key for the ButtonGroup.\n   */\n  eventKey?: ReactProps.EventKey\n  /**\n   * The button is a submit/text button\n   */\n  type?: \"submit\" | \"button\"\n  /**\n   * Provide an optional function to be called when the button element is clicked\n   */\n  onClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    eventKey?: { eventKey?: ReactProps.EventKey },\n  ) => void\n} & ReactProps.Component\n\nconst Button = ({\n  variant = \"primary\",\n  className,\n  selected = false,\n  children = \"Click\",\n  eventKey,\n  onClick,\n  ...props\n}: PropsWithChildren<ButtonProps>) => {\n  return (\n    <button\n      className={cx(styled.wrapper, styled[variant], { [styled.selected]: selected }, className)}\n      style={props.style}\n      onClick={e => {\n        onClick && onClick(e, { eventKey: eventKey })\n      }}\n      {...props}>\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","import Popup from \"reactjs-popup\"\nimport { PopupProps } from \"reactjs-popup/dist/types\"\n\nexport type ModalPopupProps = {\n  /**\n   * Should the modal appear on screen or not\n   */\n  open?: boolean\n  backdrop?: boolean\n} & Partial<Pick<PopupProps, \"open\" | \"closeOnDocumentClick\" | \"onClose\" | \"children\">>\n\nconst ModalPopup = ({ open = false, backdrop = true, ...props }: ModalPopupProps) => {\n  return (\n    <Popup\n      modal\n      nested\n      lockScroll\n      open={open}\n      closeOnDocumentClick={backdrop}\n      closeOnEscape\n      onClose={props.onClose}\n      contentStyle={{\n        background: \"transparent\",\n        border: \"none\",\n        width: \"auto\",\n      }}\n      overlayStyle={{\n        backgroundColor: \"#091e428a\",\n      }}>\n      {props.children}\n    </Popup>\n  )\n}\n\nexport default ModalPopup\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalDialog_wrapper__SJQv5\"};","import cx from \"classnames\"\nimport styled from \"./ModalDialog.module.scss\"\n\nexport type ModalDialogProps = ReactProps.Component\n\nconst ModalDialog = (props: ModalDialogProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={props.style}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default ModalDialog\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalHeader_wrapper__tVVhd\"};","import cx from \"classnames\"\nimport styled from \"./ModalHeader.module.scss\"\n\nexport type ModalHeaderProps = {\n  /**\n   * The Modal header.\n   */\n  title?: string\n} & ReactProps.Component\n\nconst ModalHeader = (props: ModalHeaderProps) => {\n  return (\n    <header className={cx(styled.wrapper, props.className)} style={props.style}>\n      <h1>{props.title}</h1>\n      {props.children}\n    </header>\n  )\n}\n\nexport default ModalHeader\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ModalBody_main__yFQS5\"};","import cx from \"classnames\"\nimport styled from \"./ModalBody.module.scss\"\n\nexport type ModalBodyProps = {\n  /**\n   * The Modal content. (props.children > props.content)\n   */\n  content?: string\n} & ReactProps.Component\n\nconst ModalBody = (props: ModalBodyProps) => {\n  return (\n    <main className={cx(styled.main, props.className)} style={props.style}>\n      {props.children || props.content}\n    </main>\n  )\n}\n\nexport default ModalBody\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ModalFooter_wrapper__eBzg3\",\"disabled\":\"ModalFooter_disabled__U85L9\"};","import cx from \"classnames\"\nimport styled from \"./ModalFooter.module.scss\"\n\nexport type ModalFooterProps = {\n  /**\n   * The text for confirm button.\n   */\n  confirmText?: string\n  /**\n   * The props for confirm button.\n   */\n  confirmButtonProps?: JSX.IntrinsicElements[\"button\"]\n  /**\n   * A callback triggered whenever the modal is confirmed.\n   */\n  onConfirm?: () => void\n  /**\n   * The text for cancel button, if text is null button will be hidden\n   */\n  cancelText?: string | null\n  /**\n   * The props for cancel button.\n   */\n  cancelButtonProps?: JSX.IntrinsicElements[\"button\"]\n  /**\n   * A callback triggered whenever the cancel button clicked.\n   */\n  onCancel?: () => void\n  /**\n   * A callback triggered whenever the modal is closed.\n   */\n  onClose?: () => void\n} & ReactProps.Component\n\nconst ModalFooter = (props: ModalFooterProps) => {\n  const handleConfirm = () => {\n    props.onConfirm && props.onConfirm()\n    props.onClose && props.onClose()\n  }\n\n  const handleCancel = () => {\n    props.onCancel && props.onCancel()\n    props.onClose && props.onClose()\n  }\n\n  return (\n    <footer className={cx(styled.wrapper, props.className)} style={props.style}>\n      {!!props.cancelText && (\n        <div\n          onClick={handleCancel}\n          className={cx({ [styled.disabled]: props.cancelButtonProps?.disabled })}>\n          {props.cancelText}\n        </div>\n      )}\n      {!!props.confirmText && (\n        <div\n          onClick={handleConfirm}\n          className={cx({ [styled.disabled]: props.confirmButtonProps?.disabled })}>\n          {props.confirmText}\n        </div>\n      )}\n    </footer>\n  )\n}\n\nexport default ModalFooter\n","import ModalPopup from \"../ModalPopup\"\nimport ModalDialog from \"../ModalDialog\"\nimport Header from \"../ModalHeader\"\nimport Body from \"../ModalBody\"\nimport Footer from \"../ModalFooter\"\nimport { ModalPopupProps } from \"../ModalPopup\"\nimport { ModalBodyProps } from \"../ModalBody\"\nimport { ModalHeaderProps } from \"../ModalHeader\"\nimport { ModalFooterProps } from \"../ModalFooter\"\nimport { PopupProps } from \"reactjs-popup/dist/types\"\n\nexport type ModalProps = ModalPopupProps &\n  ModalBodyProps &\n  ModalHeaderProps &\n  ModalFooterProps &\n  Partial<Pick<PopupProps, \"open\" | \"closeOnDocumentClick\" | \"onClose\" | \"children\">>\n\nconst Modal = (props: ModalProps) => {\n  return (\n    <ModalPopup open={props.open} closeOnDocumentClick={props.backdrop} onClose={props.onClose}>\n      <ModalDialog>\n        <Header title={props.title} />\n        <Body content={props.content}>{props.children}</Body>\n        <Footer\n          confirmText={props.confirmText}\n          confirmButtonProps={props.confirmButtonProps}\n          cancelText={props.cancelText}\n          cancelButtonProps={props.cancelButtonProps}\n          onConfirm={props.onConfirm}\n          onCancel={props.onCancel}\n          onClose={props.onClose}\n        />\n      </ModalDialog>\n    </ModalPopup>\n  )\n}\n\nexport default Modal\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ModalProps } from \"./Modal\"\n\nexport const getPopupRoot = () => {\n  let popupRoot = document.getElementById(\"popup-root\")\n  if (!popupRoot) {\n    popupRoot = document.createElement(\"div\")\n    popupRoot.setAttribute(\"id\", \"popup-root\")\n    document.body.appendChild(popupRoot)\n  }\n  return popupRoot\n}\n\nexport function open(Modal: React.FC<ModalProps>, config: ModalProps) {\n  const modalRoot = getPopupRoot()\n  const modalDiv = document.createElement(\"div\")\n  modalRoot.appendChild(modalDiv)\n\n  function bindClose(config: ModalProps) {\n    const { onConfirm, onCancel, onClose, ...theOtherConfig } = config\n    const bind = (fn?: () => void) =>\n      fn\n        ? () => {\n            typeof fn === \"function\" && fn()\n            close()\n          }\n        : close\n\n    return {\n      ...theOtherConfig,\n      onConfirm: bind(onConfirm),\n      onCancel: bind(onCancel),\n      onClose: bind(onClose),\n    }\n  }\n\n  function render(config: ModalProps) {\n    ReactDOM.render(<Modal {...bindClose(config)} />, modalDiv)\n  }\n\n  function update(newConfig: ModalProps) {\n    render({\n      ...config,\n      ...newConfig,\n      open: true,\n    })\n  }\n\n  function close() {\n    render({\n      ...config,\n      open: false,\n    })\n  }\n\n  render({\n    ...config,\n    open: true,\n  })\n\n  return {\n    destroy: close,\n    update,\n  }\n}\n\nexport function withAlert(config: ModalProps) {\n  return {\n    ...config,\n    cancelText: null,\n  }\n}\n\nexport function withConfirm(config: ModalProps) {\n  return {\n    ...config,\n    cancelText: config.cancelText,\n  }\n}\n","import ModalBase, { ModalProps } from \"./Modal\"\nimport CustomModal from \"./CustomModal\"\nimport ModalDialog from \"./ModalDialog\"\nimport ModalHeader from \"./ModalHeader\"\nimport ModalBody from \"./ModalBody\"\nimport ModalFooter from \"./ModalFooter\"\nimport { open, withAlert, withConfirm } from \"./withOpen\"\n\nexport type { ModalProps } from \"./Modal\"\nexport type { CustomModalProps } from \"./CustomModal\"\nexport type { ModalHeaderProps } from \"./ModalHeader\"\nexport type { ModalFooterProps } from \"./ModalFooter\"\n\nconst Modal = Object.assign(ModalBase, {\n  alert: (config: ModalProps) => open(ModalBase, withAlert(config)),\n  confirm: (config: ModalProps) => open(ModalBase, withConfirm(config)),\n  Dialog: ModalDialog,\n  Header: ModalHeader,\n  Body: ModalBody,\n  Footer: ModalFooter,\n})\n\nexport { CustomModal }\nexport default Modal\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Profile_wrapper__r3jTF\",\"avatar\":\"Profile_avatar__xyyqj\",\"username\":\"Profile_username__2YFrb\",\"hint\":\"Profile_hint__xL3J2\",\"enhance\":\"Profile_enhance__O0aWp\",\"chat\":\"Profile_chat__hJK6i\",\"chat-unread\":\"Profile_chat-unread__hBtH+\"};","import styled from \"./Profile.module.scss\"\nimport Icon from \"components/Icon\"\nimport { useGo } from \"components/Router\"\nimport { useAuth } from \"hooks/useAuth\"\nimport { useEffect } from \"react\"\nimport { useGetMemberInboxLazyQuery } from \"pages/Member/MemberInbox/MemberInbox.graphql.generated\"\nimport Colors from \"./colors.json\"\n\nconst getBackgroundColor = () => {\n  const AVATAR_COLOR = \"avatar-color\"\n  let index = parseInt(`${localStorage.getItem(AVATAR_COLOR)}`, 10)\n  if (!index) {\n    index = Math.round(Math.random() * 1000)\n    localStorage.setItem(AVATAR_COLOR, `${index}`)\n  }\n  return Colors[index % Colors.length]\n}\n\nconst Profile = () => {\n  const go = useGo()\n  const auth = useAuth()\n  const [loadMemberInboxQuery, getMemberInboxQuery] = useGetMemberInboxLazyQuery()\n  const backgroundColor = getBackgroundColor()\n  const userEmail = auth.user.email || \"Unknown\"\n  const userName = auth.user.name || \"未命名\"\n  const consults = getMemberInboxQuery.data?.me?.consults || []\n\n  useEffect(() => {\n    if (auth.user.id) {\n      loadMemberInboxQuery()\n    }\n  }, [auth.user.id, loadMemberInboxQuery])\n\n  return (\n    <div className={styled.wrapper}>\n      <div className={styled.avatar} style={{ background: backgroundColor }}>\n        {userEmail[0].toUpperCase()}\n      </div>\n      <div className={styled.username}>{userName}</div>\n\n      {!auth.user.clinic && (\n        <div\n          className={styled.chat}\n          onClick={() => {\n            auth.user.clinic ? go.toDoctorInbox() : go.toMemberInbox()\n          }}>\n          <Icon name=\"Chat\" />\n          {consults.length > 1 &&\n            consults?.map(consult => consult?.userInboxes?.some(el => !el?.read)) && (\n              <div className={styled[\"chat-unread\"]} />\n            )}\n        </div>\n      )}\n    </div>\n  )\n}\nexport default Profile\n","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type UserInboxesFragment = {\n  __typename: \"ConsultExt\"\n  userInboxes?: Array<{\n    __typename: \"UserInbox\"\n    id?: string | null\n    read: boolean\n    readAt: number\n    topicId?: string | null\n    replies?: Array<{ __typename: \"ConsultTopicReply\"; content?: string | null } | null> | null\n    clinic?: { __typename: \"Clinic\"; id?: string | null; name?: string | null } | null\n  } | null> | null\n}\n\nexport type GetMemberInboxQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetMemberInboxQuery = {\n  me?: {\n    __typename: \"User\"\n    consults?: Array<{\n      __typename: \"ConsultExt\"\n      id?: string | null\n      subject?: string | null\n      content?: string | null\n      days: number\n      images?: Array<string | null> | null\n      oneOnOne: boolean\n      userInboxes?: Array<{\n        __typename: \"UserInbox\"\n        id?: string | null\n        read: boolean\n        readAt: number\n        topicId?: string | null\n        replies?: Array<{ __typename: \"ConsultTopicReply\"; content?: string | null } | null> | null\n        clinic?: { __typename: \"Clinic\"; id?: string | null; name?: string | null } | null\n      } | null> | null\n    } | null> | null\n  } | null\n}\n\nexport const UserInboxesFragmentDoc = gql`\n  fragment UserInboxes on ConsultExt {\n    userInboxes {\n      id\n      read\n      readAt\n      topicId\n      replies {\n        content\n      }\n      clinic {\n        id\n        name\n      }\n    }\n  }\n`\nexport const GetMemberInboxDocument = gql`\n  query GetMemberInbox {\n    me {\n      consults {\n        id\n        subject\n        content\n        days\n        images\n        oneOnOne\n        ...UserInboxes\n      }\n    }\n  }\n  ${UserInboxesFragmentDoc}\n`\n\n/**\n * __useGetMemberInboxQuery__\n *\n * To run a query within a React component, call `useGetMemberInboxQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMemberInboxQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMemberInboxQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMemberInboxQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetMemberInboxQuery, GetMemberInboxQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetMemberInboxQuery, GetMemberInboxQueryVariables>(\n    GetMemberInboxDocument,\n    options,\n  )\n}\nexport function useGetMemberInboxLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetMemberInboxQuery, GetMemberInboxQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetMemberInboxQuery, GetMemberInboxQueryVariables>(\n    GetMemberInboxDocument,\n    options,\n  )\n}\nexport type GetMemberInboxQueryHookResult = ReturnType<typeof useGetMemberInboxQuery>\nexport type GetMemberInboxLazyQueryHookResult = ReturnType<typeof useGetMemberInboxLazyQuery>\nexport type GetMemberInboxQueryResult = Apollo.QueryResult<\n  GetMemberInboxQuery,\n  GetMemberInboxQueryVariables\n>\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Member_wrapper__AeC9a\"};","import { useState } from \"react\"\nimport Button from \"components/Button\"\nimport Profile from \"containers/Profile\"\nimport Toolbars from \"containers/Toolbars\"\nimport { useGo } from \"components/Router\"\nimport Modal from \"components/Modal\"\nimport { useAuth } from \"hooks/useAuth\"\nimport { sentResetPassword } from \"firebaseClient\"\nimport styled from \"./Member.module.scss\"\n\nconst DEFAULT_MODAL_MSG = {\n  title: \"寄送認證郵件\",\n  content: \"將密碼認證信寄至註冊信箱\",\n  confirm: \"發送\",\n  cancel: \"取消\",\n}\n\nconst Member = () => {\n  const [open, setOpen] = useState(false)\n  const go = useGo()\n  const auth = useAuth()\n  const [modalMsg, setModalMsg] = useState(DEFAULT_MODAL_MSG)\n\n  return (\n    <>\n      <Profile />\n      <div className={styled.wrapper}>\n        <Button variant=\"secondary\" onClick={go.toConsultationRecord}>\n          諮詢歷史紀錄\n        </Button>\n        <Button variant=\"secondary\" onClick={go.toCollectClinicalCase}>\n          收藏案例\n        </Button>\n        <Button variant=\"secondary\" onClick={() => setOpen(true)}>\n          修改密碼\n        </Button>\n        <Button variant=\"secondary\" onClick={go.toQuestions}>\n          常見問答\n        </Button>\n        <Modal\n          title={modalMsg.title}\n          open={open}\n          confirmText={modalMsg.confirm}\n          cancelText={modalMsg.cancel}\n          onConfirm={async () => {\n            try {\n              if (auth?.user?.email) {\n                await sentResetPassword(auth?.user?.email)\n                setModalMsg({\n                  ...modalMsg,\n                  title: \"發送成功\",\n                  content: \"請至註冊信箱查收新密碼\",\n                  confirm: \"\",\n                  cancel: \"關閉\",\n                })\n              }\n            } catch {\n              setModalMsg({\n                ...modalMsg,\n                title: \"發送失敗\",\n                content: \"請重新發送\",\n                confirm: \"\",\n                cancel: \"關閉\",\n              })\n            }\n\n            setOpen(true)\n          }}\n          onCancel={() => {\n            setModalMsg(DEFAULT_MODAL_MSG)\n            setOpen(false)\n          }}>\n          {modalMsg.content}\n        </Modal>\n        <div />\n        <Button\n          variant=\"text\"\n          onClick={() => {\n            auth.signOut()\n            go.toHome()\n          }}>\n          登出\n        </Button>\n      </div>\n      <Toolbars />\n    </>\n  )\n}\nexport default Member\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current\n    ? mergeOptions(options, execOptionsRef.current)\n    : options;\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate() // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"names":["variant","className","selected","children","eventKey","onClick","props","cx","styled","style","e","open","backdrop","modal","nested","lockScroll","closeOnDocumentClick","closeOnEscape","onClose","contentStyle","background","border","width","overlayStyle","backgroundColor","title","content","cancelText","onCancel","cancelButtonProps","disabled","confirmText","onConfirm","confirmButtonProps","Modal","config","modalRoot","popupRoot","document","getElementById","createElement","setAttribute","body","appendChild","getPopupRoot","modalDiv","render","ReactDOM","theOtherConfig","bind","fn","close","bindClose","destroy","update","newConfig","Object","assign","ModalBase","alert","withAlert","confirm","withConfirm","Dialog","ModalDialog","Header","ModalHeader","Body","ModalBody","Footer","ModalFooter","go","useGo","auth","useAuth","useGetMemberInboxLazyQuery","loadMemberInboxQuery","getMemberInboxQuery","AVATAR_COLOR","index","parseInt","localStorage","getItem","Math","round","random","setItem","Colors","getBackgroundColor","userEmail","user","email","userName","name","consults","data","me","useEffect","id","toUpperCase","clinic","toDoctorInbox","toMemberInbox","Icon","length","map","consult","userInboxes","some","el","read","defaultOptions","UserInboxesFragmentDoc","gql","GetMemberInboxDocument","useGetMemberInboxQuery","baseOptions","options","Apollo","DEFAULT_MODAL_MSG","cancel","useState","setOpen","modalMsg","setModalMsg","Profile","Button","toConsultationRecord","toCollectClinicalCase","toQuestions","sentResetPassword","signOut","toHome","Toolbars","EAGER_METHODS","useLazyQuery","query","internalState","useInternalState","useApolloClient","client","execOptionsRef","useRef","merged","current","mergeOptions","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","called","eagerMethods","useMemo","key","method","create","forceUpdate","apply","this","arguments","_i","useCallback","executeOptions","fetchPolicy","promise","asyncUpdate","then","queryResult","catch"],"sourceRoot":""}