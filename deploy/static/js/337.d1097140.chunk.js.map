{"version":3,"file":"static/js/337.d1097140.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/pages/Clinic/ClinicalCaseList/ClinicalCaseList.module.scss?20d9","pages/Clinic/ClinicalCaseList/ClinicalCaseList.graphql.generated.ts","pages/Clinic/ClinicalCaseList/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ClinicalCaseList_wrapper__6z8mo\",\"header\":\"ClinicalCaseList_header__cd6kG\",\"chat-icon\":\"ClinicalCaseList_chat-icon__mFbUz\",\"chat-unread\":\"ClinicalCaseList_chat-unread__3ifQn\",\"inner\":\"ClinicalCaseList_inner__PUmWJ\",\"filter\":\"ClinicalCaseList_filter__P5t0I\",\"button\":\"ClinicalCaseList_button__kS9of\",\"funnel\":\"ClinicalCaseList_funnel__JeTyT\"};","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetTopCategoriesQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetTopCategoriesQuery = {\n  topCategories?: Array<{\n    __typename: \"TopCategory\"\n    name?: string | null\n    secondCategories?: Array<{\n      __typename: \"SecondCategory\"\n      name?: string | null\n      categories?: Array<{\n        __typename: \"Category\"\n        id?: string | null\n        name?: string | null\n      } | null> | null\n    } | null> | null\n  } | null> | null\n}\n\nexport const GetTopCategoriesDocument = gql`\n  query GetTopCategories {\n    topCategories {\n      name\n      secondCategories {\n        name\n        categories {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetTopCategoriesQuery__\n *\n * To run a query within a React component, call `useGetTopCategoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTopCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTopCategoriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTopCategoriesQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>(\n    GetTopCategoriesDocument,\n    options,\n  )\n}\nexport function useGetTopCategoriesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetTopCategoriesQuery, GetTopCategoriesQueryVariables>(\n    GetTopCategoriesDocument,\n    options,\n  )\n}\nexport type GetTopCategoriesQueryHookResult = ReturnType<typeof useGetTopCategoriesQuery>\nexport type GetTopCategoriesLazyQueryHookResult = ReturnType<typeof useGetTopCategoriesLazyQuery>\nexport type GetTopCategoriesQueryResult = Apollo.QueryResult<\n  GetTopCategoriesQuery,\n  GetTopCategoriesQueryVariables\n>\n","import { useState, useEffect, useCallback, useRef } from \"react\"\nimport styled from \"./ClinicalCaseList.module.scss\"\n\nimport Banner from \"containers/Banner\"\nimport CaseCard from \"containers/CaseCard\"\nimport Toolbars from \"containers/Toolbars\"\nimport SearchBar from \"containers/SearchBar\"\nimport SubjectFilter from \"containers/SubjectFilter\"\n\nimport Icon from \"components/Icon\"\nimport Button from \"components/Button\"\nimport useGo from \"components/Router/useGo\"\nimport QueryStatus from \"components/QueryStatus\"\n\nimport { useAuth } from \"hooks/useAuth\"\nimport { useGetTopCategoriesLazyQuery } from \"./ClinicalCaseList.graphql.generated\"\nimport {\n  useGetCasesQuery,\n  useGetSpecifyCasesLazyQuery,\n} from \"graphql/queries/getCases.graphql.generated\"\nimport { useGetAdImagesQuery } from \"graphql/queries/getAdImage.graphql.generated\"\nimport { useGetCollectedCaseLazyQuery } from \"graphql/queries/getCollectedCase.graphql.generated\"\nimport { useGetMemberInboxLazyQuery } from \"pages/Member/MemberInbox/MemberInbox.graphql.generated\"\nimport { SortEnumType } from \"types/schema\"\n\nconst ClinicalCaseList = () => {\n  const auth = useAuth()\n  const go = useGo()\n  const [open, setOpen] = useState(false)\n  const [filter, setFilter] = useState(false)\n  const cursorRef = useRef<string>(\"\")\n  const [loadQuery, query] = useGetTopCategoriesLazyQuery()\n\n  const [loadMemberInboxQuery, getMemberInboxQuery] = useGetMemberInboxLazyQuery()\n  const [loadGetSpecifyCasesLazy, getSpecifyCasesLazy] = useGetSpecifyCasesLazyQuery()\n  const [loadGetCollectedCaseQuery, getCollectedCaseQuery] = useGetCollectedCaseLazyQuery({\n    fetchPolicy: \"no-cache\",\n  })\n  const getCasesQuery = useGetCasesQuery()\n  const adImageCaseQuery = useGetAdImagesQuery({\n    variables: {\n      first: 5,\n      orderId: SortEnumType.Desc,\n      where: \"案例輪播\",\n    },\n  })\n\n  const edges = filter\n    ? getSpecifyCasesLazy?.data?.cases?.edges || []\n    : getCasesQuery?.data?.cases?.edges || []\n  const nodes = filter ? getSpecifyCasesLazy?.data?.cases?.nodes : getCasesQuery?.data?.cases?.nodes\n\n  const adImages = adImageCaseQuery?.data?.adImages?.edges\n    ?.map(el => ({\n      image: el.node?.image || \"\",\n      clinicId: el.node?.clinicId || \"\",\n      targetId: el.node?.targetId || \"\",\n      redirectType: el.node?.redirectType,\n      sort: el.node?.sort || 0,\n    }))\n    ?.sort((prev, next) => prev.sort - next.sort)\n\n  useEffect(() => {\n    if (auth.user.id) {\n      loadMemberInboxQuery()\n    }\n  }, [auth.user.id, loadMemberInboxQuery])\n\n  useEffect(() => {\n    if (!open) return\n    loadQuery()\n  }, [open])\n\n  useEffect(() => {\n    if (auth.user.id) loadGetCollectedCaseQuery()\n  }, [auth.user.id, loadGetCollectedCaseQuery])\n\n  const fetchMore = useCallback(() => {\n    const after = edges?.[edges.length - 1]?.cursor || null\n    const target = filter ? getSpecifyCasesLazy : getCasesQuery\n    target.fetchMore({\n      variables: {\n        after,\n      },\n      updateQuery: (prevResult, { fetchMoreResult }) => {\n        if (\n          !after ||\n          after === cursorRef?.current ||\n          !fetchMoreResult?.cases?.edges ||\n          !prevResult?.cases?.edges ||\n          prevResult?.cases?.edges.length > edges.length\n        )\n          return prevResult\n\n        fetchMoreResult.cases.edges = [\n          ...(prevResult?.cases?.edges || []),\n          ...(fetchMoreResult?.cases?.edges || []),\n        ]\n\n        fetchMoreResult.cases.nodes = [\n          ...(prevResult.cases?.nodes || []),\n          ...(fetchMoreResult?.cases?.nodes || []),\n        ]\n        cursorRef.current = after\n        return fetchMoreResult\n      },\n    })\n  }, [edges, getCasesQuery, getSpecifyCasesLazy])\n  const consults = getMemberInboxQuery.data?.me?.consults || []\n\n  if (getSpecifyCasesLazy.error && getCasesQuery.error) return <QueryStatus.Error />\n\n  return (\n    <>\n      {getSpecifyCasesLazy.loading && getCasesQuery.loading ? (\n        <QueryStatus.Loading />\n      ) : (\n        <div className={styled.wrapper}>\n          <div className={styled.header}>\n            <SearchBar onInputClick={() => go.toSearchList(\"\")} />\n            <div\n              onClick={() => {\n                auth.user.clinic ? go.toDoctorInbox() : go.toMemberInbox()\n              }}>\n              <Icon name=\"chat\" className={styled[\"chat-icon\"]} />\n              {consults.length > 1 &&\n                consults.map(consult => consult?.userInboxes?.some(el => !el?.read)) && (\n                  <div className={styled[\"chat-unread\"]} />\n                )}\n            </div>\n          </div>\n          <div className={styled.inner}>\n            <Banner images={adImages} />\n            {nodes?.map((el, idx) => (\n              <CaseCard\n                key={el?.id}\n                isCollected={\n                  getCollectedCaseQuery?.data?.me?.userCollectedCases?.some(\n                    item => item?.id === el?.id,\n                  ) || false\n                }\n                title={el?.title || \"\"}\n                clinic={el?.clinic?.name || \"\"}\n                clinicId={el?.clinic?.id || \"\"}\n                introduction={el?.description || \"\"}\n                image={el?.image || \"\"}\n                tags={el?.categories?.map(el => el?.name || \"\")}\n                caseId={el?.id || \"\"}\n                last={(nodes && nodes?.length - 1 === idx) || false}\n                fetchMore={() => {\n                  getCasesQuery?.data?.cases?.pageInfo?.hasNextPage && fetchMore()\n                }}\n              />\n            ))}\n            <div className={styled.filter}>\n              <Button className={styled.button} onClick={() => setOpen(true)}>\n                <Icon name=\"funnel\" className={styled.funnel} />\n                分類篩選\n              </Button>\n              <SubjectFilter\n                open={open}\n                onClose={() => setOpen(false)}\n                getValue={value => {\n                  if (value.length === 0) return setFilter(false)\n                  loadGetSpecifyCasesLazy({\n                    variables: {\n                      searchKeys: value.map(el => ({ eq: el.id || \"\" })),\n                    },\n                  })\n                  setFilter(true)\n                }}\n                topCategoriesQuery={query}\n                defaultValue={[]}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      <Toolbars />\n    </>\n  )\n}\nexport default ClinicalCaseList\n"],"names":["defaultOptions","GetTopCategoriesDocument","gql","auth","useAuth","go","useGo","useState","open","setOpen","filter","setFilter","cursorRef","useRef","baseOptions","options","Apollo","useGetTopCategoriesLazyQuery","loadQuery","query","useGetMemberInboxLazyQuery","loadMemberInboxQuery","getMemberInboxQuery","useGetSpecifyCasesLazyQuery","loadGetSpecifyCasesLazy","getSpecifyCasesLazy","useGetCollectedCaseLazyQuery","fetchPolicy","loadGetCollectedCaseQuery","getCollectedCaseQuery","getCasesQuery","useGetCasesQuery","adImageCaseQuery","useGetAdImagesQuery","variables","first","orderId","SortEnumType","where","edges","data","cases","nodes","adImages","map","el","image","node","clinicId","targetId","redirectType","sort","prev","next","useEffect","user","id","fetchMore","useCallback","after","length","cursor","updateQuery","prevResult","fetchMoreResult","current","consults","me","error","QueryStatus","loading","className","styled","SearchBar","onInputClick","toSearchList","onClick","clinic","toDoctorInbox","toMemberInbox","Icon","name","consult","userInboxes","some","read","Banner","images","idx","CaseCard","isCollected","userCollectedCases","item","title","introduction","description","tags","categories","caseId","last","pageInfo","hasNextPage","Button","SubjectFilter","onClose","getValue","value","searchKeys","eq","topCategoriesQuery","defaultValue","Toolbars"],"sourceRoot":""}