{"version":3,"file":"static/js/90.202aa969.chunk.js","mappings":"gKACA,EAA0B,0B,wCCY1B,EARiB,SAAC,GAA6C,IAAD,IAA1CA,MAAAA,OAA0C,MAAlC,GAAkC,EAA3BC,GAA2B,YAC5D,OACE,gBAAKC,UAAWC,GAAAA,CAAGC,EAAgBH,EAAMC,WAAYF,OAAK,UAAOA,GAAjE,SACGC,EAAMI,a,uFCPb,EAA0B,wBAA1B,EAA0D,sBAA1D,EAAwF,sBAAxF,EAAqH,qBAArH,EAAkJ,sBAAlJ,EAAmL,yB,4DC0CnL,EA/Be,SAAC,GAA2C,IAAD,MAAxCL,MAAAA,OAAwC,MAAhC,GAAgC,EAAzBC,GAAyB,YAClDK,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,MAATD,KAER,OACE,iBACEN,UAAWC,GAAAA,CAAGC,EAAgBH,EAAMC,WAAvB,eACVE,EAAeH,EAAMS,OAAST,EAAMI,WAD1B,SAEVD,GAAgBH,EAAMS,QAAUT,EAAMU,WAF5B,IAIbX,OAAK,UAAOA,GALd,UAMGC,EAAMU,YACL,gBACEC,QAAS,kBAAOX,EAAMY,SAAWZ,EAAMY,WAAoBP,EAAPE,GAAiB,GAAe,IADtF,UAEE,SAACM,EAAA,EAAD,CAAMZ,UAAWE,EAAgBW,KAAK,gBAGzCd,EAAMS,OACL,gBACER,UAAWC,GAAAA,CAAGC,GAAD,UACVA,EAAqBH,EAAMU,YAFhC,SAIGV,EAAMS,QAGTT,EAAMI,c,kECpCd,I,EAAA,EAA0B,+BAA1B,EAAiE,6BAAjE,EAAoG,2BAApG,EAAyI,+B,2DCGnIW,EAAiB,GAkBVC,GAAqBC,EAAAA,EAAAA,IAAH,6N,iCCK/B,EApBsB,WAAO,IAAD,kBAE1B,ED0CK,SACLC,GAEA,IAAMC,GAAO,kBAAQJ,GAAmBG,GACxC,OAAOE,EAAAA,EAA2DJ,EAAoBG,GC9CrDE,CAAmB,CAAEC,UAAW,CAAEC,IADpDf,EAAAA,EAAAA,MAAPe,IACqE,MAArEC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAEvB,OAAID,GAAgB,SAACE,EAAA,UAAD,IAChBD,GAAc,SAACC,EAAA,QAAD,KAEhB,iCACE,SAACC,EAAA,EAAD,CAAQlB,WAAS,KACjB,UAACmB,EAAA,EAAD,CAAU5B,UAAWE,EAArB,WACE,gBAAKF,UAAWE,EAAhB,gBAA+BqB,QAA/B,IAA+BA,GAA/B,UAA+BA,EAAMM,eAArC,iBAA+B,EAAeC,aAA9C,iBAA+B,EAAuB,UAAtD,aAA+B,EAA2BtB,SAC1D,gBAAKR,UAAWE,EAAY6B,KAAS,OAAJR,QAAI,IAAJA,GAAA,UAAAA,EAAMM,eAAN,mBAAeC,aAAf,mBAAuB,UAAvB,eAA2BE,QAAS,MACrE,gBACEhC,UAAWE,EACX+B,wBAAyB,CAAEC,QAAY,OAAJX,QAAI,IAAJA,GAAA,UAAAA,EAAMM,eAAN,mBAAeC,aAAf,mBAAuB,UAAvB,eAA2BK,UAAW","sources":["webpack://psbeauty/./src/components/Layout/Backdrop/Backdrop.module.scss?d14b","components/Layout/Backdrop/index.tsx","webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/pages/Advertisement/Advertisement.module.scss?a315","pages/Advertisement/Advertisement.graphql.generated.ts","pages/Advertisement/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Backdrop_wrapper__LB3Yk\"};","import styled from \"./Backdrop.module.scss\"\nimport cx from \"classnames\"\n\nexport type BackdropProps = ReactProps.Component\n\nconst Backdrop = ({ style = {}, ...props }: BackdropProps) => {\n  return (\n    <div className={cx(styled.wrapper, props.className)} style={{ ...style }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Backdrop\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Advertisement_wrapper__CBK4Z\",\"title\":\"Advertisement_title__xni6C\",\"pic\":\"Advertisement_pic__tNFWz\",\"content\":\"Advertisement_content__XrII-\"};","import * as Types from \"../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetAdCardsQueryVariables = Types.Exact<{\n  id: Types.Scalars[\"String\"]\n}>\n\nexport type GetAdCardsQuery = {\n  adCards?: {\n    __typename: \"AdCardsConnection\"\n    nodes?: Array<{\n      __typename: \"AdCard\"\n      id?: string | null\n      image?: string | null\n      title?: string | null\n      content?: string | null\n    } | null> | null\n  } | null\n}\n\nexport const GetAdCardsDocument = gql`\n  query GetAdCards($id: String!) {\n    adCards(order: { id: DESC }, where: { id: { in: [$id] } }) {\n      nodes {\n        id\n        image\n        title\n        content\n      }\n    }\n  }\n`\n\n/**\n * __useGetAdCardsQuery__\n *\n * To run a query within a React component, call `useGetAdCardsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAdCardsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAdCardsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetAdCardsQuery(\n  baseOptions: Apollo.QueryHookOptions<GetAdCardsQuery, GetAdCardsQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetAdCardsQuery, GetAdCardsQueryVariables>(GetAdCardsDocument, options)\n}\nexport function useGetAdCardsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetAdCardsQuery, GetAdCardsQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetAdCardsQuery, GetAdCardsQueryVariables>(GetAdCardsDocument, options)\n}\nexport type GetAdCardsQueryHookResult = ReturnType<typeof useGetAdCardsQuery>\nexport type GetAdCardsLazyQueryHookResult = ReturnType<typeof useGetAdCardsLazyQuery>\nexport type GetAdCardsQueryResult = Apollo.QueryResult<GetAdCardsQuery, GetAdCardsQueryVariables>\n","import styled from \"./Advertisement.module.scss\"\nimport Backdrop from \"components/Layout/Backdrop\"\nimport Header from \"components/Layout/Header\"\nimport { useGetAdCardsQuery } from \"./Advertisement.graphql.generated\"\nimport { useParams } from \"react-router-dom\"\nimport QueryStatus from \"components/QueryStatus\"\n\nconst Advertisement = () => {\n  const { id } = useParams()\n  const { data, loading, error } = useGetAdCardsQuery({ variables: { id: id || \"\" } })\n\n  if (loading) return <QueryStatus.Loading />\n  if (error) return <QueryStatus.Error />\n  return (\n    <>\n      <Header leftArrow />\n      <Backdrop className={styled.wrapper}>\n        <div className={styled.title}>{data?.adCards?.nodes?.[0]?.title}</div>\n        <img className={styled.pic} src={data?.adCards?.nodes?.[0]?.image || \"\"} />\n        <div\n          className={styled.content}\n          dangerouslySetInnerHTML={{ __html: data?.adCards?.nodes?.[0]?.content || \"\" }}\n        />\n      </Backdrop>\n    </>\n  )\n}\nexport default Advertisement\n"],"names":["style","props","className","cx","styled","children","navigate","useNavigate","text","useParams","title","leftArrow","onClick","redirect","Icon","name","defaultOptions","GetAdCardsDocument","gql","baseOptions","options","Apollo","useGetAdCardsQuery","variables","id","data","loading","error","QueryStatus","Header","Backdrop","adCards","nodes","src","image","dangerouslySetInnerHTML","__html","content"],"sourceRoot":""}