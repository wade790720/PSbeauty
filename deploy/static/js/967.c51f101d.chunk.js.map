{"version":3,"file":"static/js/967.c51f101d.chunk.js","mappings":"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","sources":["webpack://psbeauty/./src/components/Layout/Header/Header.module.scss?8aca","components/Layout/Header/index.tsx","webpack://psbeauty/./src/containers/HistoryRecordCard/HistoryRecordCard.module.scss?be44","containers/HistoryRecordCard/index.tsx","webpack://psbeauty/./src/pages/Member/MemberConsultationRecord/MemberConsultationRecord.module.scss?9cee","pages/Member/MemberConsultationRecord/MemberConsultationRecord.graphql.generated.ts","pages/Member/MemberConsultationRecord/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Header_wrapper__e2tXX\",\"large\":\"Header_large__tDbDa\",\"small\":\"Header_small__U9DHq\",\"back\":\"Header_back__Chgho\",\"title\":\"Header_title__87Ruw\",\"has-back\":\"Header_has-back__h6eqr\"};","import styled from \"./Header.module.scss\"\nimport cx from \"classnames\"\nimport Icon from \"components/Icon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\n\nexport type HeaderProps = {\n  leftArrow?: boolean\n  title?: string\n  redirect?: () => void\n} & ReactProps.Component\n\nconst Header = ({ style = {}, ...props }: HeaderProps) => {\n  const navigate = useNavigate()\n  const { text } = useParams()\n\n  return (\n    <div\n      className={cx(styled.wrapper, props.className, {\n        [styled.large]: props.title || props.children,\n        [styled.small]: !props.title && !props.leftArrow,\n      })}\n      style={{ ...style }}>\n      {props.leftArrow && (\n        <div\n          onClick={() => (props.redirect ? props.redirect() : text ? navigate(-2) : navigate(-1))}>\n          <Icon className={styled[\"back\"]} name=\"LeftArrow\" />\n        </div>\n      )}\n      {props.title ? (\n        <div\n          className={cx(styled.title, {\n            [styled[\"has-back\"]]: props.leftArrow,\n          })}>\n          {props.title}\n        </div>\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"HistoryRecordCard_wrapper__YdfQX\",\"title\":\"HistoryRecordCard_title__kZ9xc\",\"date\":\"HistoryRecordCard_date__a43-L\",\"images\":\"HistoryRecordCard_images__07MUh\",\"content\":\"HistoryRecordCard_content__vGvkA\",\"open\":\"HistoryRecordCard_open__kAqbY\",\"more\":\"HistoryRecordCard_more__PtkOB\",\"tags\":\"HistoryRecordCard_tags__ZwCeD\",\"toggle\":\"HistoryRecordCard_toggle__7H1vm\"};","import { useState, useRef, useLayoutEffect, useEffect } from \"react\"\nimport styled from \"./HistoryRecordCard.module.scss\"\nimport cx from \"classnames\"\nimport Switch from \"react-switch\"\n\nexport type HistoryRecordCardProps = {\n  id: string\n  title: string\n  date: string\n  toggle?: boolean\n  images: string[]\n  introduction: string\n  tags?: string[]\n  onChange?: ({ id, enable }: { id: string; enable: boolean }) => void\n} & ReactProps.Component\n\nconst HistoryRecordCard = ({ ...props }: HistoryRecordCardProps) => {\n  const [over, setOver] = useState<boolean>(false)\n  const [open, setOpen] = useState<boolean>(false)\n  const [toggle, setToggle] = useState<boolean>()\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    setToggle(props.toggle)\n  }, [props.toggle])\n\n  useLayoutEffect(() => {\n    const clientHeight = ref.current?.clientHeight || 0\n    const scrollHeight = ref.current?.scrollHeight || 0\n    if (clientHeight && scrollHeight > clientHeight) {\n      setOver(true)\n    }\n  }, [])\n\n  return (\n    <div className={styled.wrapper}>\n      <div className={styled.title}>{props.title}</div>\n      <div className={styled.date}>{props.date}</div>\n      {props.images.length > 0 && (\n        <div className={styled.images}>\n          {props.images.map((image, idx) => (\n            <img key={`img-${idx}`} src={image} />\n          ))}\n        </div>\n      )}\n      <div className={cx(styled.content, open && styled.open)} ref={ref}>\n        {props.introduction}\n      </div>\n      {over && !open && (\n        <span className={styled.more} onClick={() => setOpen(true)}>\n          顯示更多\n        </span>\n      )}\n      <div className={styled.tags}>\n        {props.tags?.map((tag, idx) => (\n          <div key={`tag-${idx}`}>\n            <span>#</span>\n            {tag}\n          </div>\n        ))}\n      </div>\n      {typeof props.toggle === \"boolean\" && (\n        <div className={styled.toggle}>\n          <Switch\n            checkedIcon={false}\n            uncheckedIcon={false}\n            width={51}\n            height={31}\n            onColor=\"#7873E5\"\n            offColor=\"#CBCBCD\"\n            activeBoxShadow=\"0 0 2px 3px #7873E533\"\n            checked={toggle || false}\n            onChange={() => {\n              if (props.onChange) {\n                setToggle(!toggle)\n                props.onChange({ id: props.id, enable: !props.toggle })\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default HistoryRecordCard\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MemberConsultationRecord_wrapper__s45zI\",\"empty-card\":\"MemberConsultationRecord_empty-card__7psNK\",\"empty\":\"MemberConsultationRecord_empty__J81IG\"};","import * as Types from \"../../../types/schema\"\n\nimport { gql } from \"@apollo/client\"\nimport * as Apollo from \"@apollo/client\"\nconst defaultOptions = {} as const\nexport type GetMeQueryVariables = Types.Exact<{ [key: string]: never }>\n\nexport type GetMeQuery = {\n  me?: {\n    __typename: \"User\"\n    consults?: Array<{\n      __typename: \"ConsultExt\"\n      id?: string | null\n      images?: Array<string | null> | null\n      days: number\n      oneOnOne: boolean\n      consultAt: number\n      subject?: string | null\n      content?: string | null\n      enable: boolean\n      categories?: Array<{\n        __typename: \"Category\"\n        name?: string | null\n        id?: string | null\n      } | null> | null\n    } | null> | null\n  } | null\n}\n\nexport type EnableConsultMutationVariables = Types.Exact<{\n  id: Types.Scalars[\"String\"]\n  enable: Types.Scalars[\"Boolean\"]\n}>\n\nexport type EnableConsultMutation = {\n  enableConsult?: { __typename: \"EnableConsultPayload\"; id?: string | null; enable: boolean } | null\n}\n\nexport const GetMeDocument = gql`\n  query GetMe {\n    me {\n      consults {\n        id\n        images\n        days\n        oneOnOne\n        consultAt\n        subject\n        content\n        enable\n        categories {\n          name\n          id\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetMeQuery__\n *\n * To run a query within a React component, call `useGetMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetMeQuery, GetMeQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetMeQuery, GetMeQueryVariables>(GetMeDocument, options)\n}\nexport function useGetMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetMeQuery, GetMeQueryVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetMeQuery, GetMeQueryVariables>(GetMeDocument, options)\n}\nexport type GetMeQueryHookResult = ReturnType<typeof useGetMeQuery>\nexport type GetMeLazyQueryHookResult = ReturnType<typeof useGetMeLazyQuery>\nexport type GetMeQueryResult = Apollo.QueryResult<GetMeQuery, GetMeQueryVariables>\nexport const EnableConsultDocument = gql`\n  mutation EnableConsult($id: String!, $enable: Boolean!) {\n    enableConsult(input: { id: $id, enable: $enable }) {\n      id\n      enable\n    }\n  }\n`\nexport type EnableConsultMutationFn = Apollo.MutationFunction<\n  EnableConsultMutation,\n  EnableConsultMutationVariables\n>\n\n/**\n * __useEnableConsultMutation__\n *\n * To run a mutation, you first call `useEnableConsultMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEnableConsultMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [enableConsultMutation, { data, loading, error }] = useEnableConsultMutation({\n *   variables: {\n *      id: // value for 'id'\n *      enable: // value for 'enable'\n *   },\n * });\n */\nexport function useEnableConsultMutation(\n  baseOptions?: Apollo.MutationHookOptions<EnableConsultMutation, EnableConsultMutationVariables>,\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<EnableConsultMutation, EnableConsultMutationVariables>(\n    EnableConsultDocument,\n    options,\n  )\n}\nexport type EnableConsultMutationHookResult = ReturnType<typeof useEnableConsultMutation>\nexport type EnableConsultMutationResult = Apollo.MutationResult<EnableConsultMutation>\nexport type EnableConsultMutationOptions = Apollo.BaseMutationOptions<\n  EnableConsultMutation,\n  EnableConsultMutationVariables\n>\n","import cx from \"classnames\"\nimport styled from \"./MemberConsultationRecord.module.scss\"\nimport Header from \"components/Layout/Header\"\nimport HistoryRecordCard from \"containers/HistoryRecordCard\"\nimport {\n  useGetMeQuery,\n  useEnableConsultMutation,\n} from \"./MemberConsultationRecord.graphql.generated\"\nimport QueryStatus from \"components/QueryStatus\"\nimport dayjs from \"dayjs\"\n\nconst MemberConsultationRecord = () => {\n  const { data, loading, error } = useGetMeQuery({ fetchPolicy: \"no-cache\" })\n  const [enableConsultMutation] = useEnableConsultMutation()\n\n  if (loading) return <QueryStatus.Loading />\n  if (error) return <QueryStatus.Error />\n\n  return (\n    <>\n      <Header title=\"諮詢歷史紀錄件夾\" leftArrow />\n      <div className={cx(styled.wrapper, { [styled.empty]: !data?.me?.consults?.length })}>\n        <div className={styled[\"empty-card\"]}>尚無諮詢紀錄</div>\n        {[...(data?.me?.consults || [])]\n          .sort((a, b) => {\n            if (!a || !b) return 0\n            return b.consultAt - a.consultAt\n          })\n          .filter(el => !el?.oneOnOne)\n          ?.map(el => {\n            const date = dayjs((el?.consultAt || 0) * 1000).format(\"YYYY-MM-DD\")\n            return (\n              <HistoryRecordCard\n                key={el?.id}\n                id={el?.id || \"\"}\n                title={el?.subject || \"\"}\n                date={`${date}｜剩餘${el?.days}天`}\n                toggle={el?.enable}\n                images={el?.images?.map(el => el ?? \"\") || []}\n                introduction={el?.content || \"\"}\n                tags={el?.categories?.map(el => el?.name || \"\") || []}\n                onChange={({ id, enable }: { id: string; enable: boolean }) => {\n                  enableConsultMutation({\n                    variables: {\n                      id,\n                      enable,\n                    },\n                  })\n                }}\n              />\n            )\n          })}\n      </div>\n    </>\n  )\n}\nexport default MemberConsultationRecord\n"],"names":["style","props","navigate","useNavigate","text","useParams","className","cx","styled","title","children","leftArrow","onClick","redirect","Icon","name","useState","over","setOver","open","setOpen","toggle","setToggle","ref","useRef","useEffect","useLayoutEffect","clientHeight","current","scrollHeight","date","images","length","map","image","idx","src","introduction","tags","tag","checkedIcon","uncheckedIcon","width","height","onColor","offColor","activeBoxShadow","checked","onChange","id","enable","defaultOptions","GetMeDocument","gql","EnableConsultDocument","baseOptions","options","Apollo","useGetMeQuery","fetchPolicy","data","loading","error","useEnableConsultMutation","enableConsultMutation","QueryStatus","Header","me","consults","sort","a","b","consultAt","filter","el","oneOnOne","dayjs","format","HistoryRecordCard","subject","days","content","categories","variables"],"sourceRoot":""}